[
  
   
      {
        "title"    : "My favorite settings",
        "category" : "",
        "tags"     : " setting",
        "url"      : "/2018/09/17/my-settings.html",
        "date"     : "September 17, 2018",
        "excerpt"  : "<p>내가 좋아하는 세팅</p>\n\n<ul>\n  <li>.bash_profile</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># TERMINAL customize\nexport CLICOLOR=1\nexport GREP_OPTIONS=\"--color=auto\"\n\nexport PS1=\"[\\u] \\[\\033[1;32m\\]\\w...",
        "content"  : "<p>내가 좋아하는 세팅</p>\n\n<ul>\n  <li>.bash_profile</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># TERMINAL customize\nexport CLICOLOR=1\nexport GREP_OPTIONS=\"--color=auto\"\n\nexport PS1=\"[\\u] \\[\\033[1;32m\\]\\w \\[\\033[m\\]$ \"\n</code></pre></div></div>\n\n<ul>\n  <li>.screenrc</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hardstatus alwayslastline\nshelltitle 'bash'\nhardstatus string \"%{.bW}%-w%{.rW}%n*%t%{-}%+w %= %c ${USER}@%H\"\n</code></pre></div></div>\n\n<ul>\n  <li>.vimrc</li>\n</ul>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>syntax on\nset hlsearch\nset incsearch\nset showmatch\nset autoindent\nset cindent\nset si\nset cindent\nset nu\nset shiftwidth=4\nset tabstop=4\nset expandtab\nset smarttab\nset title\nset wmnu\nset visualbell\nset wrap\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "Gmail API",
        "category" : "",
        "tags"     : " google, google_api",
        "url"      : "/2018/09/05/google-api-gmail.html",
        "date"     : "September 5, 2018",
        "excerpt"  : "<ul>\n  <li>https://developers.google.com/gmail/api/quickstart/python</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">SCOPES</code> 수정하기</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SCOPES = ['https://mail.g...",
        "content"  : "<ul>\n  <li>https://developers.google.com/gmail/api/quickstart/python</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">SCOPES</code> 수정하기</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SCOPES = ['https://mail.google.com/', 'https://www.googleapis.com/auth/gmail.modify', 'https://www.googleapis.com/auth/gmail.compose', 'https://www.googleapis.com/auth/gmail.send']\n</code></pre></div></div>\n\n<ul>\n  <li>https://developers.google.com/gmail/api/guides/sending</li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">return {'raw': base64.urlsafe_b64encode(message.as_string())}</code>\n대신 \n<code class=\"highlighter-rouge\">return {'raw': base64.urlsafe_b64encode(message.as_string().encode()).decode()}</code>\n로 실행하기</p>\n\n<ul>\n  <li>Linux에서 처음 돌릴 때\n<code class=\"highlighter-rouge\">python run.py --noauth_local_webserver</code>로 실행 후 URL 별도로 실행하여 발급된 코드 입력하면 됩니다.</li>\n</ul>\n"
      } ,
   
      {
        "title"    : "eosio/ understand smart contracts",
        "category" : "",
        "tags"     : " eosio, eos",
        "url"      : "/2018/08/23/understand_eosio.html",
        "date"     : "August 23, 2018",
        "excerpt"  : "<p>Tutorial 따라하는건 전혀 어렵지 않은데, 이해없이 따라하니까 남는게 없다.</p>\n\n<p>하나씩 차근차근 다시 해보겠습니다. 말로 설명할 수 있을 때까지!</p>\n\n<h1 id=\"smart-contracts\">Smart Contracts</h1>\n\n<p>https://developers.eos.io/eosio-cpp/docs</p>\n\n<h2 id=\"required-knowledge\">Required Knowledge</h2>\n...",
        "content"  : "<p>Tutorial 따라하는건 전혀 어렵지 않은데, 이해없이 따라하니까 남는게 없다.</p>\n\n<p>하나씩 차근차근 다시 해보겠습니다. 말로 설명할 수 있을 때까지!</p>\n\n<h1 id=\"smart-contracts\">Smart Contracts</h1>\n\n<p>https://developers.eos.io/eosio-cpp/docs</p>\n\n<h2 id=\"required-knowledge\">Required Knowledge</h2>\n\n<ul>\n  <li><a href=\"https://webassembly.org/\">WebAssembly</a></li>\n</ul>\n\n"
      } ,
   
      {
        "title"    : "GIT/ config",
        "category" : "",
        "tags"     : " git",
        "url"      : "/2018/08/06/git.html",
        "date"     : "August 6, 2018",
        "excerpt"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config <span class=\"nt\">--global</span> user.email\n</code></pre></div></div>\n\n<p>clone했을 때 이것부터 설정하고 작업하자</p>\n\n<p>아까운 내 contributions..\n초록빛이 왜 안드...",
        "content"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git config <span class=\"nt\">--global</span> user.email\n</code></pre></div></div>\n\n<p>clone했을 때 이것부터 설정하고 작업하자</p>\n\n<p>아까운 내 contributions..\n초록빛이 왜 안드나 했더니 내 커밋들이 내 계정으로 설정이 안되어있어서 그런 것이었다.\n엉엉</p>\n\n"
      } ,
   
      {
        "title"    : "Telegram Bot",
        "category" : "",
        "tags"     : " telegrambot, bot",
        "url"      : "/2018/08/03/telegram-bot.html",
        "date"     : "August 3, 2018",
        "excerpt"  : "<p>/setdescription\n봇 눌렀을 때, 설명 띄우기</p>\n\n<p>BotFather - /mybots\nBot Settings - Group Privacy - disabled\n해야 일반 단톡방에서도 메세지를 읽어올 수 있다.</p>\n\n<p>sendPhoto\nhttps://core.telegram.org/bots/api#sendphoto</p>\n<blockquote>\n  <p>도움 1도 안된다</p>\n</blockquote>\n\n<d...",
        "content"  : "<p>/setdescription\n봇 눌렀을 때, 설명 띄우기</p>\n\n<p>BotFather - /mybots\nBot Settings - Group Privacy - disabled\n해야 일반 단톡방에서도 메세지를 읽어올 수 있다.</p>\n\n<p>sendPhoto\nhttps://core.telegram.org/bots/api#sendphoto</p>\n<blockquote>\n  <p>도움 1도 안된다</p>\n</blockquote>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s\">'chat_id'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"p\">),</span>\n<span class=\"s\">'photo'</span><span class=\"p\">:</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'./photos/{}'</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"n\">photo</span><span class=\"p\">),</span> <span class=\"s\">'rb'</span><span class=\"p\">),</span>\n<span class=\"s\">'caption'</span><span class=\"p\">:</span> <span class=\"s\">'caption aweoirhjqw;ef'</span>\n<span class=\"p\">}</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">resp</span><span class=\"p\">:</span>\n<span class=\"k\">return</span> <span class=\"bp\">True</span>\n</code></pre></div></div>\n\n<p>editMessage</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">edit_message</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">message_id</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">reply_markup</span><span class=\"o\">=</span><span class=\"bp\">None</span><span class=\"p\">):</span>\n<span class=\"n\">apiEndpoint_edit</span> <span class=\"o\">=</span> <span class=\"s\">\"https://api.telegram.org/bot{}/editMessageText\"</span><span class=\"o\">.</span><span class=\"nb\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"Content-Type\"</span><span class=\"p\">:</span> <span class=\"s\">\"application/json\"</span><span class=\"p\">}</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s\">\"chat_id\"</span><span class=\"p\">:</span> <span class=\"n\">chat_id</span><span class=\"p\">,</span>\n<span class=\"s\">\"text\"</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">,</span>\n<span class=\"s\">\"message_id\"</span><span class=\"p\">:</span> <span class=\"n\">message_id</span><span class=\"p\">,</span>\n<span class=\"s\">\"parse_mode\"</span><span class=\"p\">:</span> <span class=\"s\">\"Markdown\"</span>\n<span class=\"p\">}</span>\n<span class=\"k\">if</span> <span class=\"n\">reply_markup</span><span class=\"p\">:</span>\n<span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">reply_markup</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">apiEndpoint_edit</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">resp</span><span class=\"p\">:</span>\n<span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"k\">return</span> <span class=\"n\">ret</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">reply_markup</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">\"reply_markup\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"s\">\"inline_keyboard\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"p\">[</span>\n<span class=\"p\">{</span><span class=\"s\">'callback_data'</span><span class=\"p\">:</span> <span class=\"s\">'lc_telegram'</span><span class=\"p\">,</span> <span class=\"s\">'text'</span><span class=\"p\">:</span> <span class=\"s\">'telegram'</span><span class=\"p\">,</span> <span class=\"s\">'url'</span><span class=\"p\">:</span> <span class=\"s\">'https://t.me/langchain_kr'</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s\">'callback_data'</span><span class=\"p\">:</span> <span class=\"s\">'lc_website'</span><span class=\"p\">,</span> <span class=\"s\">'text'</span><span class=\"p\">:</span> <span class=\"s\">'website'</span><span class=\"p\">,</span> <span class=\"s\">'url'</span><span class=\"p\">:</span> <span class=\"s\">'http://langchain.io/'</span><span class=\"p\">}</span>\n<span class=\"p\">],</span>\n<span class=\"p\">[</span>\n<span class=\"p\">{</span><span class=\"s\">'callback_data'</span><span class=\"p\">:</span> <span class=\"s\">'lc_koreos'</span><span class=\"p\">,</span> <span class=\"s\">'text'</span><span class=\"p\">:</span> <span class=\"s\">'koreos'</span><span class=\"p\">,</span> <span class=\"s\">'url'</span><span class=\"p\">:</span> <span class=\"s\">'http://koreos.io/LangChain'</span><span class=\"p\">},</span>\n<span class=\"p\">{</span><span class=\"s\">'callback_data'</span><span class=\"p\">:</span> <span class=\"s\">'set_lang'</span><span class=\"p\">,</span> <span class=\"s\">'text'</span><span class=\"p\">:</span> <span class=\"s\">'⚙ Set your language'</span><span class=\"p\">}</span>\n<span class=\"p\">]</span>\n<span class=\"p\">]</span>\n<span class=\"p\">}}</span>\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "aiohttp - multipart",
        "category" : "",
        "tags"     : " aiohttp",
        "url"      : "/2018/08/03/aiohttp-multipart.html",
        "date"     : "August 3, 2018",
        "excerpt"  : "<p>http://docs.aiohttp.org/en/stable/client_quickstart.html?highlight=file#post-a-multipart-encoded-file</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">url</span> <span class...",
        "content"  : "<p>http://docs.aiohttp.org/en/stable/client_quickstart.html?highlight=file#post-a-multipart-encoded-file</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s\">'http://httpbin.org/post'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s\">'file'</span><span class=\"p\">:</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s\">'report.xls'</span><span class=\"p\">,</span> <span class=\"s\">'rb'</span><span class=\"p\">)}</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">apiEndpoint_send</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">resp</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"bp\">True</span>\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "Google API/ Install on Python",
        "category" : "",
        "tags"     : " google_api, python",
        "url"      : "/2018/07/31/google-api.html",
        "date"     : "July 31, 2018",
        "excerpt"  : "<p>https://developers.google.com/sheets/api/quickstart/python</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install --upgrade google-api-python-client oauth2client\n</code></pre></div></div>\n\n",
        "content"  : "<p>https://developers.google.com/sheets/api/quickstart/python</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ pip install --upgrade google-api-python-client oauth2client\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "travis ci/ 시작하기",
        "category" : "",
        "tags"     : " ci, travis-ci",
        "url"      : "/2018/07/31/travis-ci.html",
        "date"     : "July 31, 2018",
        "excerpt"  : "<p>https://docs.travis-ci.com/user/getting-started/</p>\n\n<p>`.travis.yml</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>language: python\npython:\n- '3.6'\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_f...",
        "content"  : "<p>https://docs.travis-ci.com/user/getting-started/</p>\n\n<p>`.travis.yml</p>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>language: python\npython:\n- '3.6'\n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_fe7a31125bf0_key -iv $encrypted_fe7a31125bf0_iv\n  -in config.json.enc -out config.json -d\n\ninstall:\n- pip install -r requirement.txt\n- python -m nltk.downloader punkt\n\nscript: pytest test\nsudo: enabled\nservices:\n- redis-server\n</code></pre></div></div>\n\n<ul>\n  <li>testcase를 자동으로 돌려줄 도구가 필요했다</li>\n</ul>\n\n<p>지속적인 통합, continuos integration</p>\n\n<ul>\n  <li>travis-ci 계정 만들기</li>\n</ul>\n\n<p>https://travis-ci.org/</p>\n\n<ul>\n  <li>\n    <p>travis-ci 로그인 후, profile 들어가서 테스트 돌릴 repository 활성화 시켜주기</p>\n  </li>\n  <li>\n    <p>github repository에 올리면 안되는, 설정키, 비밀 파일 올리기</p>\n  </li>\n</ul>\n\n<p>https://docs.travis-ci.com/user/encrypting-files/\nhttps://blog.outsider.ne.kr/1252</p>\n\n<p>터미널에서 github repository로 cd 해준 후, travis login을 해준 후 진행해줄 것</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>$ travis encrypt-file super_secret.txt --add\n</code></pre></div></div>\n<p>명령어를 진행하면 .travis.yml에 자동으로 명령어가 등록된다.</p>\n\n<p>비밀파일.enc 파일과 함께 git push 하기. 비밀파일은 절대 같이 push하지 말 것</p>\n\n<ul>\n  <li>\n    <p>.travis.yml\nrequirement.txt에 있는 것부터 설치도되록 설정해줘야한다.</p>\n\n    <ul>\n      <li>nltk 설치하는 명령어</li>\n    </ul>\n  </li>\n</ul>\n\n<p>install:</p>\n<ul>\n  <li>“python -m nltk.downloader punkt”</li>\n</ul>\n\n<p>-로 넣으면 여러개 넣을 수 있고, 아니면 install: qwerqqr로 한줄만 넣을 수 있음</p>\n\n<ul>\n  <li>redis 설치</li>\n</ul>\n\n<p>https://docs.travis-ci.com/user/database-setup/#redis</p>\n\n<p>services: - redis-server 만 넣어주면 알아서 돌아간다</p>\n\n"
      } ,
   
      {
        "title"    : "GIT/ branch",
        "category" : "",
        "tags"     : " git",
        "url"      : "/2018/07/25/git-branch.html",
        "date"     : "July 25, 2018",
        "excerpt"  : "<p>$ git checkout -b <branch>\n$ git branch --set-upstream-to=origin/<branch> <new branch=\"\"></new></branch></branch></p>\n\n",
        "content"  : "<p>$ git checkout -b <branch>\n$ git branch --set-upstream-to=origin/<branch> <new branch=\"\"></new></branch></branch></p>\n\n"
      } ,
   
      {
        "title"    : "Linux 명령어",
        "category" : "",
        "tags"     : " linux, command, cmd",
        "url"      : "/2018/07/25/linux_cmd.html",
        "date"     : "July 25, 2018",
        "excerpt"  : "<p>sudo chmod -R 777</p>\n\n<p>Permission 에러나면</p>\n\n<p>chmod 600 ciceron_test.pem</p>\n",
        "content"  : "<p>sudo chmod -R 777</p>\n\n<p>Permission 에러나면</p>\n\n<p>chmod 600 ciceron_test.pem</p>\n"
      } ,
   
      {
        "title"    : "EOSIO",
        "category" : "",
        "tags"     : " eos, eosio",
        "url"      : "/2018/07/20/eosio.html",
        "date"     : "July 20, 2018",
        "excerpt"  : "<p>##EOS</p>\n\n<p>https://developers.eos.io/eosio-cpp/reference#action</p>\n\n<p>https://github.com/EOSIO</p>\n\n",
        "content"  : "<p>##EOS</p>\n\n<p>https://developers.eos.io/eosio-cpp/reference#action</p>\n\n<p>https://github.com/EOSIO</p>\n\n"
      } ,
   
      {
        "title"    : "aws/ load balancer",
        "category" : "",
        "tags"     : " aws",
        "url"      : "/2018/07/18/aws-loadbalancer.html",
        "date"     : "July 18, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>AWS의 Load Balancer(로드 밸런서) 사용하기</p>\n\n<p><br /></p>\n\n<h2 id=\"where-is-load-balancer\">where is ‘Load Balancer’?</h2>\n\n<p>컴퓨팅 &gt; EC2 에 들어가 ‘로드밸런서’ 클릭</p>\n\n<p>‘로드 밸런서 생성’ 클릭</p>\n\n<p>로드 밸런서 유형 선택 &gt; <strong>Network Loa...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>AWS의 Load Balancer(로드 밸런서) 사용하기</p>\n\n<p><br /></p>\n\n<h2 id=\"where-is-load-balancer\">where is ‘Load Balancer’?</h2>\n\n<p>컴퓨팅 &gt; EC2 에 들어가 ‘로드밸런서’ 클릭</p>\n\n<p>‘로드 밸런서 생성’ 클릭</p>\n\n<p>로드 밸런서 유형 선택 &gt; <strong>Network Load Balancer</strong> 선택</p>\n\n<ul>\n  <li>\n    <p>Application Load Balancer: 80, 443 포트만 사용할 때</p>\n  </li>\n  <li>\n    <p>Network Load Balancer: 80, 443 외의 포트도 사용할 때</p>\n  </li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"set-up\">set up</h2>\n\n<h3 id=\"단계-1-로드-밸런서-구성\">단계 1: 로드 밸런서 구성</h3>\n\n<h4 id=\"기본-구성\">기본 구성</h4>\n\n<ul>\n  <li>이름</li>\n  <li>\n    <p>체계</p>\n\n    <p><strong>인터넷 연결</strong>을 선택합니다.</p>\n\n    <ul>\n      <li>인터넷 연결: 외부 접속을 허용</li>\n      <li>내부: 외부 접속을 차단</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"리스너\">리스너</h4>\n\n<p>구성한 프로토콜 및 포트를 사용하여 연결 요청을 확인하는 프로세스</p>\n\n<ul>\n  <li>\n    <p>로드 밸런서 포트</p>\n\n    <p>메인으로 쓸 포트로 설정해주시면 됩니다.</p>\n\n    <p>다른 포트도 허가하고 싶다면 다음 페이지에서 추가할 수 있습니다.</p>\n  </li>\n</ul>\n\n<h4 id=\"가용-영역\">가용 영역</h4>\n\n<p>내가 선택한 region(지역)에 존재하는 <em>가용 영역</em> 중에서 로드 밸런서가 활동할 영역을 선택해주면 됩니다.</p>\n\n<p>저는 모두 선택하였습니다.</p>\n\n<h3 id=\"단계-2-라우팅-구성\">단계 2: 라우팅 구성</h3>\n\n<h4 id=\"대상-그룹\">대상 그룹</h4>\n\n<p>단계 1에서 설정한 포트 외의 포트도 포함시키고 싶을 때 입력하시면 됩니다.</p>\n\n<p>없으면 바로 다음 단계로 넘어가시면 됩니다.</p>\n\n<ul>\n  <li>\n    <p>대상 그룹: 새 대상 그룹</p>\n  </li>\n  <li>\n    <p>포트: 단계 1에서 설정한 포트 외의 다른 포트</p>\n  </li>\n  <li>\n    <p>대상 유형</p>\n\n    <p><strong>instance</strong>를 선택합니다.</p>\n\n    <ul>\n      <li>instance: 도메인, AWS EC2 주소로 접근할 수 있다</li>\n      <li>ip: 그 외의 서버, IP 주소로 접근할 수 있다</li>\n    </ul>\n  </li>\n</ul>\n\n<h4 id=\"상태-검사\">상태 검사</h4>\n\n<p>프로토콜 <strong>TCP</strong> 선택</p>\n\n<p><br /></p>\n\n<h3 id=\"단계-3-대상-등록\">단계 3: 대상 등록</h3>\n\n<p>아래쪽에 있는 <strong>인스턴스</strong>에서 로드 밸런스에 등록할 인스턴스를 선택하여 <code class=\"highlighter-rouge\">등록된 항목에 추가</code> 하세요.</p>\n\n<h3 id=\"단계-4-검토\">단계 4: 검토</h3>\n\n<p>내가 원하는 대로 설정했는지 확인해주신 후 <code class=\"highlighter-rouge\">생성</code>을 클릭해주시면 됩니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"confirm\">confirm</h2>\n\n<p>로드밸런서 목록에서 생성된 로드밸런서를 확인할 수 있습니다.</p>\n\n<p>목록에서 만든 로드밸런서를 클릭하면 아래쪽에 <strong>DNS 이름</strong>가 앞으로 EC2 인스턴스를 호출할 때 대신 쓰는 주소입니다.</p>\n\n<p>로드밸런서에 등록한 인스턴스를 호출하는 주소 대신 로드밸런서의 <strong>DNS 이름</strong>을 넣고 엔터를 치면 정상적으로 활동할 수 있는 것을 확인할 수 있습니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"epilogue\">epilogue</h2>\n\n<p>이로써 서버 하나가 죽어도 다른 서버가 대신 활동하여 정상적인 상태를 유지할 수 있게 되었습니다!</p>\n\n<p>로드밸런서에 여러개를 등록했을 때, 여러개가 같은 역할을 수행중이라면 호출했을 때 어떤 서버에 먼저 호출하는지 궁금해졌어요. 다음에 기회가 된다면 확인해보고 싶습니다.</p>\n\n"
      } ,
   
      {
        "title"    : "git/ github, fork and pull request",
        "category" : "",
        "tags"     : " git",
        "url"      : "/2018/07/14/github-fork.html",
        "date"     : "July 14, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>github repository를 fork하여 작업할 일이 생겼습니다.</p>\n\n<p>github contributions를 초록빛으로 물들이기에도 좋은 기회입니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<p>github에서 너무 친절하게 설명을 해줘서, 굳이 제가 따로 적을 필요 없을거같아 링크를 남깁니다.</p>\n\n<p><br /...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>github repository를 fork하여 작업할 일이 생겼습니다.</p>\n\n<p>github contributions를 초록빛으로 물들이기에도 좋은 기회입니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<p>github에서 너무 친절하게 설명을 해줘서, 굳이 제가 따로 적을 필요 없을거같아 링크를 남깁니다.</p>\n\n<p><br /></p>\n\n<h3 id=\"fork-a-github-repository\">fork a github repository</h3>\n\n<p><a href=\"https://help.github.com/articles/fork-a-repo/\">github - Fork a repo</a></p>\n\n<p><a href=\"https://help.github.com/articles/syncing-a-fork/\">github - Syncing a fork</a></p>\n\n<p><br /></p>\n\n<h3 id=\"pull-request-to-original-repository\">pull request to original repository</h3>\n\n<p><a href=\"https://help.github.com/articles/about-pull-requests/\">github - about pull requests</a></p>\n\n<p>pull request 할 때 메세지를 적습니다.</p>\n\n<p>이 때 issue를 해결하여서 pull request를 보낸 거라면, 메세지에 <code class=\"highlighter-rouge\">#issue_number</code>를 적어주면 해당 이슈에 자동으로 연결되어 관리자가 보다 쉽게 issue를 처리할 수 있습니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"epilogue\">epilogue</h2>\n\n<p>익숙해지는 git 명령어가 많아질수록 뿌듯해진다. 발전하고 있다는 느낌이 들어서.</p>\n\n<p>이렇게 다른 사람의 repository에 기여를 처음 해보았습니다.</p>\n\n<p>오픈 소스에 기여하는게 이런 건가?</p>\n"
      } ,
   
      {
        "title"    : "linux/ install and set screen",
        "category" : "",
        "tags"     : " linux, ubuntu, screen",
        "url"      : "/2018/07/12/2328-linux-screen.html",
        "date"     : "July 12, 2018",
        "excerpt"  : "<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>ubuntu</li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"install\">install</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo ...",
        "content"  : "<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>ubuntu</li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"install\">install</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get update\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>screen\n</code></pre></div></div>\n<p>어디서든, 뭔가를 설치할 때 <code class=\"highlighter-rouge\">sudo</code>를 붙여라. <code class=\"highlighter-rouge\">permission denied</code> 에러를 한번이라도 더 피할 수 있습니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"setting\">setting</h2>\n\n<p>아무런 세팅 설정 않고 스크린에 입장하면 아무것도 없이 빈칸만 떠서 당황할 수 있습니다.</p>\n\n<p>세팅은 <code class=\"highlighter-rouge\">~/.screenrc</code> 파일을 편집해주세요.</p>\n\n<h3 id=\"statusbar\">statusbar</h3>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>hardstatus alwayslastline\nshelltitle 'bash'\nhardstatus string \"%{.bW}%-w%{.rW}%n*%t%{-}%+w %= %c ${USER}@%H\"\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "os/ about screen",
        "category" : "",
        "tags"     : " os, macos, linux, screen",
        "url"      : "/2018/07/12/2305-linux-screen.html",
        "date"     : "July 12, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>서버를 운영할 때, 터미널을 끄면 컴퓨터가 종료되듯 실행하고 있던 것들이 다 꺼지는 상황을 겪으신 적 있으신지요?</p>\n\n<p>node.js를 쓸 땐 nodemon이 있지만 python, flask를 쓸 땐 어떻게 하시나요?</p>\n\n<p>여러 방법이 있는데, 저는 <code class=\"highlighter-rouge\">screen</code>을 사용합니다.</p>\n\n<p><br /...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>서버를 운영할 때, 터미널을 끄면 컴퓨터가 종료되듯 실행하고 있던 것들이 다 꺼지는 상황을 겪으신 적 있으신지요?</p>\n\n<p>node.js를 쓸 땐 nodemon이 있지만 python, flask를 쓸 땐 어떻게 하시나요?</p>\n\n<p>여러 방법이 있는데, 저는 <code class=\"highlighter-rouge\">screen</code>을 사용합니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"about\">about</h2>\n\n<p>스크린은 윈도우 위에 윈도우를 띄우는 것이고, 스크린 내의 각 탭들은 크롬에서의 탭들이라 생각하면 됩니다.</p>\n\n<p><strong>linux 입장 &gt; screen 입장 &gt; 탭에서 작업</strong>하는 것입니다.</p>\n\n<p>스크린을 나와서 가상 서버를 나와도 스크린에서 실행중인 것들은 죽지 않고 계속 돕니다. 스크린을 삭제하지 않는 이상 계속말이죠.</p>\n\n<p>터미널이나 putty로 접속하여 작업하다가 컴퓨터를 꺼도 기존에 실행중이던 프로그램들이 꺼질 걱정을 하지 않아도되죠.</p>\n\n<p><br /></p>\n\n<h3 id=\"environment\">environment</h3>\n\n<ul>\n  <li>linux, ubuntu</li>\n  <li>macos</li>\n</ul>\n\n<blockquote>\n  <p>macos에서 되는지는 실수로 macos에 그냥 screen 쳤다가 알게됐습니다. 허허</p>\n</blockquote>\n\n<p><br /></p>\n\n<h3 id=\"related-episodes-tags\">related episodes, tags</h3>\n\n<ul>\n  <li>os</li>\n  <li>linux</li>\n  <li>macos</li>\n  <li>screen\n    <ul>\n      <li>install and set sreen</li>\n      <li>screen command</li>\n    </ul>\n  </li>\n</ul>\n"
      } ,
   
      {
        "title"    : "jenkins/ create slave node via SSH",
        "category" : "",
        "tags"     : " tool, jenkins",
        "url"      : "/2018/07/12/1753-jenkins-slavenode.html",
        "date"     : "July 12, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>젠킨스를 설치한 서버가 아닌 외부 서버를 대상으로 스케줄러를 돌리기</p>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<p>jenkins에 slave node를 등록하려면, jenkins가 돌아가고 있는 서버에서 SSH 키를 만들어 slave node에 인증을 해줘야 한다.</p>\n\n<p>그러므로 Jenkins  페이지에서도 작업을 해야하지만 양...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>젠킨스를 설치한 서버가 아닌 외부 서버를 대상으로 스케줄러를 돌리기</p>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<p>jenkins에 slave node를 등록하려면, jenkins가 돌아가고 있는 서버에서 SSH 키를 만들어 slave node에 인증을 해줘야 한다.</p>\n\n<p>그러므로 Jenkins  페이지에서도 작업을 해야하지만 양쪽 서버에서 다 작업을 해줘야합니다.</p>\n\n<p>처음이라 많이 헤맸지만, 다시 헤매고 싶지 않아 이렇게 기록을 해둡니다. jenkins야 왜 한번에 안알려주냐!</p>\n\n<p><br /></p>\n\n<h3 id=\"slave-node-server에-사용자-jenkins-추가\">slave node server에 사용자 jenkins 추가</h3>\n\n<ol>\n  <li>\n    <p>slave node로 등록할 서버에 ‘jenkins’라는 사용자 만들어주기\n스케줄러를 돌릴 때, 일반적으로, 스케줄러 돌릴 용도로 사용자를 만들어 준다고 합니다.</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> $ sudo adduser jenkins\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>사용자 jenkins의 권한 권한 수정해주기</p>\n\n    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nv\">$ </span>vim /etc/sudoers\n</code></pre></div>    </div>\n    <p><code class=\"highlighter-rouge\">/etc/sudoers</code> 들어갑니다.</p>\n\n    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"c\"># User privilege specification</span>\n root\t<span class=\"nv\">ALL</span><span class=\"o\">=(</span>ALL<span class=\"o\">)</span>\tALL\n jenkins <span class=\"nv\">ALL</span><span class=\"o\">=(</span>ALL<span class=\"o\">)</span>\tNOPASSWD: ALL\t<span class=\"c\"># 이 줄을 추가해주세요</span>\n</code></pre></div>    </div>\n    <p>jenkins의 권한을 비밀번호 없이 접근 가능하도록 수정해줍니다.</p>\n  </li>\n</ol>\n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"jenkins가-설치된-server에서-ssh-key-인증\">jenkins가 설치된 server에서 SSH Key 인증</h3>\n\n<ol>\n  <li>\n    <p>jenkins(master) 서버에서 SSH 키 만들기</p>\n\n    <p>실제 jenkins가 돌아가고 있는 서버에 로그인해줍니다.</p>\n\n    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nv\">$ </span>ssh-keygen <span class=\"nt\">-t</span> rsa\n</code></pre></div>    </div>\n    <p>여러가지 질문이 나오는데 다 빈칸으로, 엔터를 그냥 계속 눌러주면 됩니다.</p>\n\n    <p>비밀번호를 설정해주면 매번 비밀번호를 입력해야되는 수고로움이 있습니다.</p>\n  </li>\n  <li>\n    <p>slave 서버에 만든 SSH 키 인증하기</p>\n\n    <div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"nv\">$ </span>ssh-copy-id jenkins@<span class=\"sb\">`</span>your slave server ip or domain<span class=\"sb\">`</span>\n ...\n The authenticity of host <span class=\"s1\">'10.20.3.132 (10.20.3.132)'</span> can<span class=\"s1\">'t be established.\n ECDSA key fingerprint is 53:c2:32:63:12:a2:8f:29:25:40:fa:0a:b1:d4:8c:f4.\n ...\n Permission denied\n</span></code></pre></div>    </div>\n    <p>우리가 이미 slave 서버에 jenkins를 만들었기 때문에 jenkins라는 서버에 인증을 해주는 것입니다.</p>\n\n    <p>마지막에 ‘Permission denied’라고 떠서 실패한 것 같지만 잘 읽어보면 위에 <code class=\"highlighter-rouge\">fingerprint</code>가 찍혔다고 메세지가 뜬 것을 확인할 수 있습니다. 제대로 등록된 것입니다.</p>\n  </li>\n</ol>\n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"jenkins에-credentials-ssh-private-key-등록\">jenkins에 credentials, ssh private key 등록</h3>\n\n<ol>\n  <li>Jenkins에서, 왼쪽 바의 <strong>Credentials &gt; Systems</strong> 페이지 들어간다.</li>\n  <li><strong>Global credentials (unrestricted)</strong> 클릭 왼쪽 메뉴바의 <code class=\"highlighter-rouge\">Add Credentials</code> 클릭</li>\n  <li>아래와 같이 설정하고 SAVE</li>\n</ol>\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Kind</td>\n      <td><strong>SSH Username with private key</strong></td>\n    </tr>\n    <tr>\n      <td>Scope</td>\n      <td>Global</td>\n    </tr>\n    <tr>\n      <td>Username</td>\n      <td>접속할 서버의(slave node로 추가할) 사용자 이름 <br />ex)ubuntu, sunho</td>\n    </tr>\n    <tr>\n      <td>Private Key</td>\n      <td>Enter directly 선택 후, ssh 또는 pem 키를 텍스트 복사붙여넣기<br />cat, vim을 통하여 키를 열면 텍스트로 보입니다.(아래 사진 참고)</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><img src=\"/assets/img/jenkins/2018-07-12-01.png\" alt=\"ssh_key\" /></p>\n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"slave-node-등록\">slave node 등록</h3>\n\n<ol>\n  <li>왼쪽 바의** Jenkins 관리 &gt; 노드 관리** 페이지 들어간다</li>\n  <li><strong>신규 노드</strong> 클릭</li>\n  <li>노드명 입력하고 <code class=\"highlighter-rouge\">Permanent Agent</code> 선택 후 OK</li>\n  <li>아래값 설정하고 SAVE</li>\n</ol>\n\n<table>\n  <thead>\n    <tr>\n      <th>Key</th>\n      <th>Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Name</td>\n      <td>slave node 이름</td>\n    </tr>\n    <tr>\n      <td>Description</td>\n      <td>(선택사항) 설명을 입력해주세요</td>\n    </tr>\n    <tr>\n      <td># of  executors</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Remote root directory</td>\n      <td>credentials 등록할 때 입력한 Username의 기본 폴더<br />credentials 등록한 SSH키 서버에 jenkins라는 사용자를 만드는 것을 추천합니다.<br />ex) /home/jenkins</td>\n    </tr>\n    <tr>\n      <td>Labels</td>\n      <td>닉네임 정도라고 생각하면 됩니다. item 등록할 때 필요합니다.</td>\n    </tr>\n    <tr>\n      <td>Usage</td>\n      <td>Use this node as much as possible</td>\n    </tr>\n    <tr>\n      <td>Launch method</td>\n      <td>Launch slave agents via SSH (아래에서 자세히)</td>\n    </tr>\n    <tr>\n      <td>Availability</td>\n      <td>Keep this agent online as much as possible</td>\n    </tr>\n  </tbody>\n</table>\n\n<h4 id=\"launch-method-설정\">Launch method 설정</h4>\n<ul>\n  <li>Host:  domain 또는 ip 주소 입력</li>\n  <li>Credentials:  위에서 등록한 것 선택</li>\n  <li>Host Key Verification Strategy: Known hosts file Verification Strategy</li>\n  <li>Port: <em>고급</em> 버튼을 클릭하면 뜨는데, 기본은 22입니다. <strong>이 포트를 꼭 열어두세요.</strong></li>\n</ul>\n\n<p><code class=\"highlighter-rouge\">Node Properties</code> 는 필요하면 추가하세요.</p>\n\n<p><br /></p>\n\n<p><br /></p>\n\n<h3 id=\"new-item-등록하기\">new item 등록하기</h3>\n\n<p>이제 jenkins에 slave node까지 붙였으니, 드디어 제가 원하던 스케줄러 작업만 붙여주면 됩니다.</p>\n\n<p><br /></p>\n\n<h4 id=\"jenkins에서-새로운-item-만들기\">jenkins에서 새로운 item 만들기</h4>\n\n<ol>\n  <li><strong>새로운 item</strong> 클릭</li>\n  <li>Enter an item name &gt; <strong>Freestyle project</strong>\n  존재하는 Item 중에 복사할 게 있다면 <strong>Copy from</strong>으로 복사할 수 있습니다.</li>\n  <li>\n    <p>구성 설정하고 SAVE</p>\n\n    <ul>\n      <li>\n        <p>설명: 협업하는 사람들을 위해 써주면 센스쟁이</p>\n      </li>\n      <li>General\n        <ul>\n          <li><strong>오래된 빌드 삭제</strong> 선택\n            <ul>\n              <li>Strategy: Log Rotation</li>\n              <li>보관할 최대갯수: 1000</li>\n            </ul>\n          </li>\n          <li>\n            <p><strong>빌드 안함</strong> 선택</p>\n          </li>\n          <li>\n            <p><strong>Restrict where this project can be run</strong> 선택</p>\n\n            <ul>\n              <li>\n                <p>Label Expression:</p>\n\n                <p>등록한 slave node의 label 이름을 입력하면 됩니다. 자동완성 기능이 있으니 처음 몇자만 입력해주면 됩니다.</p>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p>소스 코드 관리: None</p>\n      </li>\n      <li>\n        <p>빌드 유발</p>\n\n        <ul>\n          <li>\n            <p><strong>Build periodically</strong></p>\n\n            <p>원하는 시간마다 실행할 수 있습니다. <a href=\"https://crontab.guru/\">crontab.guru</a> 을 통하여 쉽게 원하는 값을 찾을 수 있습니다.</p>\n          </li>\n        </ul>\n      </li>\n      <li>\n        <p>빌드 환경: 건너뜁니다</p>\n\n        <ul>\n          <li>\n            <p>Build</p>\n\n            <p><code class=\"highlighter-rouge\">Add build step</code> 에서 다양한 옵션을 선택할 수 있는데, 저는 스크립트로 바로 실행할 것이기 때문에 <code class=\"highlighter-rouge\">Execute shell</code>을 선택했습니다.</p>\n            <ul>\n              <li>\n                <p>Execute shell:</p>\n\n                <p>쉘로 스크립트를 실행할 수 있습니다.</p>\n\n                <p>실행하는 위치는 설정한 node의 <code class=\"highlighter-rouge\">/home/'node user name'/workspace/'item_name'</code>입니다.</p>\n              </li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>빌드 후 조치: 건너뜁니다.</li>\n    </ul>\n  </li>\n</ol>\n\n<p><br /></p>\n\n<h4 id=\"slave-node에서-스케줄러-등록할-작업-만들기\">slave node에서 스케줄러 등록할 작업 만들기</h4>\n\n<p>스케줄러 돌릴 코드(작업)은 이미 만들어 두셨겠죠?</p>\n\n<p>이 과정을 마지막에 하는 이유는, 작업을 원하는 임의의 위치에 둘 수도 있지만 jenkins가 돌아가는 위치에 둘 수도 있기 때문에 마지막으로 미뤘습니다.</p>\n\n<ol>\n  <li>\n    <p>slave 서버의  jenkins로 로그인</p>\n  </li>\n  <li>\n    <p>cd workspace/<code class=\"highlighter-rouge\">jenkins에서 만든 item 이름</code>에 스케줄러 돌릴 작업 만들기</p>\n\n    <p>굳이 이 아래에 두는 이유는 jenkins에서 어디로 이동할지나 권한에 대한 고민을 덜 수 있기 때문입니다.</p>\n  </li>\n</ol>\n\n<p><br /></p>\n\n<h2 id=\"epilogue\">epilogue</h2>\n\n<p>이렇게 알면 간단하지만 험난한 jenkins에 slave node 등록하기 + item 추가하기 까지 해보았습니다.</p>\n\n<p>jenkins가 한번 설정해두면 간단하지만 초기 세팅도 간단하진 않네요.</p>\n\n<p>slave node를 등록하려면 jenkins 페이지뿐만 아니라 서버에서도 작업을 해줘야 합니다.</p>\n\n<p>제 사수께서 직접 해봐야 알고, 언제까지 자기가 해줄 수 없으니 저에게 미션을 주셨는데.. 허허.. 힘들었지만 뿌듯하고 감사함을 느낄 수 있었습니다. 고마워요!</p>\n\n<p><br />\n<br /></p>\n\n<blockquote>\n  <p>참고:</p>\n\n  <p><a href=\"https://mohitgoyal.co/2017/02/14/add-linux-slave-node-in-the-jenkins/\">Add linux slave node in the Jenkins</a></p>\n\n  <p><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04\">How To Install Java with Apt-Get on Ubuntu 16.04</a></p>\n\n</blockquote>\n"
      } ,
   
      {
        "title"    : "jenkins/ try scheduler",
        "category" : "",
        "tags"     : " tool, jenkins",
        "url"      : "/2018/07/12/1730-jenkins-start.html",
        "date"     : "July 12, 2018",
        "excerpt"  : "<p>처음으로 스케줄러 작업을 해보았습니다.</p>\n\n<p>jenkins, apache mesos, celery 등 여러 도구로 작업할 수 있는데, 그 중에서 젠킨스를 선택했습니다. 사수가 이것을 이용하고 있었던게 가장 큰 이유입니다.</p>\n\n<p><a href=\"https://jenkins.io/\">젠킨스</a>는 소프트웨어 개발 시 지속적 통합(continuous integration) 서비스를 제공하는 툴이라고 위키백과에서 알려줬어...",
        "content"  : "<p>처음으로 스케줄러 작업을 해보았습니다.</p>\n\n<p>jenkins, apache mesos, celery 등 여러 도구로 작업할 수 있는데, 그 중에서 젠킨스를 선택했습니다. 사수가 이것을 이용하고 있었던게 가장 큰 이유입니다.</p>\n\n<p><a href=\"https://jenkins.io/\">젠킨스</a>는 소프트웨어 개발 시 지속적 통합(continuous integration) 서비스를 제공하는 툴이라고 위키백과에서 알려줬어요. 마우스 클릭만으로도 등록할 수 있어 배우기 쉽고 간편하다는 장점이 있다고 합니다.\nmesos는 코드로 작업해야하지만 기능은 더 많고, celery는 스케줄러로 등록할 내용을 API로 만들어서 몇분마다 요청하도록 하는 파이썬 패키지래요.</p>\n\n<p>시작부터 너무 많은 일들이 있어서, 에피소드별로 정리하려고 합니다. 화이팅!</p>\n\n<p><br /></p>\n\n<h3 id=\"작업-환경\">작업 환경</h3>\n\n<ul>\n  <li>jenkins</li>\n  <li>ubuntu</li>\n  <li>java version “1.8.0_171”</li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"jenkins-사용-중-겪은-에피소드\">jenkins 사용 중 겪은 에피소드</h3>\n\n<ul>\n  <li>install jenkins on ubuntu</li>\n  <li><a href=\"https://sssunho.github.io/2018/07/12/1753-jenkins-slavenode.html\">create slave node via SSH</a></li>\n  <li>create new item</li>\n</ul>\n\n"
      } ,
   
      {
        "title"    : "python/ install on python3",
        "category" : "",
        "tags"     : " Productivity, Software",
        "url"      : "/2018/07/12/1020-python-setting.html",
        "date"     : "July 12, 2018",
        "excerpt"  : "<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>ubuntu</li>\n  <li>python 3.5</li>\n</ul>\n\n<p><br /></p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>python3 <span class=\"nt\">-versi...",
        "content"  : "<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>ubuntu</li>\n  <li>python 3.5</li>\n</ul>\n\n<p><br /></p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>python3 <span class=\"nt\">-version</span>\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>python3-pip\n<span class=\"nv\">$ </span>pip3 <span class=\"nt\">--version</span>\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>apt-get <span class=\"nb\">install </span>virtualenv\n\n<span class=\"nv\">$ </span>virtualenv <span class=\"nt\">-p</span> python3 <span class=\"sb\">`</span>virtualenv_name<span class=\"sb\">`</span>\nAlready using interpreter /usr/bin/python3\nUsing base prefix <span class=\"s1\">'/usr'</span>\nNew python executable <span class=\"k\">in</span> /home/ubuntu/mycat/bin/python3\nAlso creating executable <span class=\"k\">in</span> /home/ubuntu/mycat/bin/python\nInstalling setuptools, pkg_resources, pip, wheel...done.\n\n<span class=\"nv\">$ </span><span class=\"nb\">source</span> <span class=\"sb\">`</span>virtualenv_name<span class=\"sb\">`</span>/bin/activate\n<span class=\"nv\">$ </span><span class=\"nb\">.</span> <span class=\"sb\">`</span>virtualenv_name<span class=\"sb\">`</span>/bin/activate\n\n\n</code></pre></div></div>\n\n<p>https://cjh5414.github.io/ubuntu-pyenv-virtualenv/</p>\n\n<p>ImportError: No module named ‘google’</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip install --upgrade google-api-python-client\n</code></pre></div></div>\n\n<p>pip 설치하기\n<code class=\"highlighter-rouge\">python3 get-pip.py</code></p>\n\n"
      } ,
   
      {
        "title"    : "jekyll/ GemNotFound",
        "category" : "",
        "tags"     : " githubpages, jekyll, errors",
        "url"      : "/2018/07/11/jekyll-jemoji.html",
        "date"     : "July 11, 2018",
        "excerpt"  : "<h2 id=\"problem\">problem</h2>\n\n<p>github pages에 포스팅할 때, 수정사항이 반영됐나 바로 확인하기 위해서 <code class=\"highlighter-rouge\">jekyll serve</code>를 돌리고 싶었습니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><...",
        "content"  : "<h2 id=\"problem\">problem</h2>\n\n<p>github pages에 포스팅할 때, 수정사항이 반영됐나 바로 확인하기 위해서 <code class=\"highlighter-rouge\">jekyll serve</code>를 돌리고 싶었습니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>jekyll serve\n/Library/Ruby/Gems/2.3.0/gems/bundler-1.16.2/lib/bundler/spec_set.rb:91:in <span class=\"sb\">`</span>block <span class=\"k\">in </span>materialize<span class=\"s1\">': Could not find gemoji-3.0.0 in any of the sources (Bundler::GemNotFound)\n...\n</span></code></pre></div></div>\n<p>GemNotFound가 뜨면서 <code class=\"highlighter-rouge\">gemoji</code>를 찾을 수 없다고 합니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"cause\">cause</h2>\n\n<p>Gemfile에 추가해둔 gemoji가 문제입니다. gemoji가 설치가 안되어 있는거죠.</p>\n\n<p>그럼 gemoji를 설치해주면 되겠습니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"solution\">solution</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>bundle\n</code></pre></div></div>\n<p><code class=\"highlighter-rouge\">bundle</code> 명령어를 통해 Gemfile에 추가한 gem을 설치해줍니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Gem::FilePermissionError: You don<span class=\"s1\">'t have write permissions for the /var/folders/53/m5_nh66s4zqf0r36sgc3dyx40000gp/T/bundler20180711-1697-1vghnecgemoji-3.0.0/bin directory.\nAn error occurred while installing gemoji (3.0.0), and Bundler cannot continue.\nMake sure that `gem install gemoji -v '</span>3.0.0<span class=\"s1\">' --source '</span>https://rubygems.org/<span class=\"s1\">'` succeeds before bundling.\n\nIn Gemfile:\n  gemoji\n</span></code></pre></div></div>\n<p>라며 permission error가 나타날 수도 있습니다.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 방법 1</span>\n<span class=\"nv\">$ </span>gem <span class=\"nb\">install </span>gemoji <span class=\"nt\">-v</span> <span class=\"s1\">'3.0.0'</span> <span class=\"nt\">--source</span> <span class=\"s1\">'https://rubygems.org/'</span>\n\n<span class=\"c\"># 방법 2</span>\n<span class=\"nv\">$ </span><span class=\"nb\">sudo </span>bundle\nDon<span class=\"s1\">'t run Bundler as root. Bundler can ask for sudo if it is needed, and installing your bundle as root will break this application for all non-root users on this machine.\nFetching gem metadata from https://rubygems.org/...........\n...\nBundle complete! 3 Gemfile dependencies, 29 gems now installed.\nUse `bundle info [gemname]` to see where a bundled gem is installed.\n</span></code></pre></div></div>\n<p>두 가지 방법으로 설치를 할 수 있습니다.</p>\n\n<p>두번째 방법은 경고가 뜨기 때문에 첫번째 방법을 추천합니다.</p>\n\n"
      } ,
   
      {
        "title"    : "python/ UnicodeEncodeError",
        "category" : "",
        "tags"     : " problem, error, python, encode",
        "url"      : "/2018/07/10/python-encoding-error.html",
        "date"     : "July 10, 2018",
        "excerpt"  : "<h2 id=\"problem\">problem</h2>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>UnicodeEncodeError: 'latin-1' codec can't encode characters in position ...\n</code></pre></div></div>\n<p>파이썬 작업 중 <code class=\"highli...",
        "content"  : "<h2 id=\"problem\">problem</h2>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>UnicodeEncodeError: 'latin-1' codec can't encode characters in position ...\n</code></pre></div></div>\n<p>파이썬 작업 중 <code class=\"highlighter-rouge\">UnicodeEncodeError</code> 인코딩 에러가 계속 뜬다.</p>\n\n<p><br /></p>\n\n<p>인코딩 문제는 방심할 때 나타난다. 어디서 어떻게 나타날지 모른다.</p>\n\n<p>그래서 오늘은 인코딩이 일어날 때 사용중이었던 모듈을 기록해두려한다.</p>\n\n<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>sqlalchemy</li>\n  <li>pymysql</li>\n  <li>requests</li>\n  <li>json</li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"cause\">cause</h2>\n\n<blockquote>\n  <p>정확히는 원인을 찾아나간 과정입니다.</p>\n</blockquote>\n\n<ol>\n  <li>requests의 response가 문제인 줄 알았다.\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> {'data1': \"???? ???? ?? ??? ?? ??? ???.'\",\n 'data2': 'Huh? really?\\n'\n            'huh? really?\\n'\n            '? what?\\n'\n            'huh??\\n'\n            '? what?\\n'\n            'huh??\\n'\n            'huh??\\n'\n            \"'Let's say. '\\n\",\n 'data3': '????? ????? ?? ??? ?? ??? ??? &amp;quot;'}\n</code></pre></div>    </div>\n\n    <p>그래서 일단 결과값들을 decoding하기 시작..</p>\n\n    <p>json.loads()가 encoding, decoding을 못하는 줄 알고 온갖 인코딩, 디코딩 방법들을 시도했다.</p>\n\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s\">'utf-8'</span><span class=\"p\">)</span>\n <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s\">'utf-8'</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p>mysql 테이블 character set을 잘못한 줄 알았으나 <code class=\"highlighter-rouge\">utf8_general_ci</code>로 잘 되있었다.\n workbench에서 직접 쿼리도 때려보고,</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>SHOW FULL COLUMNS FROM table_name;\n</code></pre></div>    </div>\n\n    <p>를 통하여 칼럼 속성도 다시 확인해보았으나 오류를 발견하지 못했다.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p>갑자기 쎄한 기분이 들어, sqlalchemy의 결과값, row를 찍어보았다.</p>\n\n    <p>역시나.. 쎄한기분은 틀리지 않는다.</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(\"'???, ???'\\x85?? ?? ???\\n?? 2018-07-04 11:47\\n?? '???'? ??[?? ?]\\n(??=???) ???.\")\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<p>드디어 원인을 찾았다! sqlalchemy 결과값부터가 문제였다.</p>\n\n<p>여태 아무 문제없이 잘 돌고 있었는데.. 이렇게 통수를 치다니. 방심했다.</p>\n\n<p><br /></p>\n\n<h2 id=\"solution\">solution</h2>\n\n<p>원인찾기는 많이 헤맸지만 문제해결은 어렵지 않았다.</p>\n\n<p><a href=\"https://docs.sqlalchemy.org/en/latest/dialects/mysql.html?highlight=encode\">SQLAlchemy, MySQL Document</a> 에서 바로 알 수 있다.</p>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code># 방법 1\nengine = create_engine('mysql+mysqldb://...', charset=utf8)\n\n# 방법 2\nmysql+pymysql://{user}:{password}@{host}:3306/{database}?charset=utf8\n</code></pre></div></div>\n\n<p><code class=\"highlighter-rouge\">charset=utf8</code> 만 붙여주면 모든 것이 평화롭다.</p>\n\n<p><br /></p>\n\n<h2 id=\"key-point-summary\">key point summary</h2>\n\n<p>sqlalchemy의 charset을 utf8로 설정해둠으로써 인코딩에 대한 우려를 접을 수 있다.</p>\n\n<p>sqlalchemy 뿐만아니라 string을 다룰 땐 항상 charset, encode, decode를 조심하자. 제발.</p>\n"
      } ,
   
      {
        "title"    : "bot/ create telegram bot (1)",
        "category" : "",
        "tags"     : " bot, telegram",
        "url"      : "/2018/07/06/telegrambot-create.html",
        "date"     : "July 6, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>회사에서 챗봇 서비스를 제공하기로 했습니다.</p>\n\n<p>챗봇을 인공지능으로 대응하는 곳이 많다고 하지만, 아직 인공지능에게 온전히 맡기기엔 어려운 상황입니다.</p>\n\n<p>기능을 최소한으로, 하나에 집중해서 만드는 게 더 효과적입니다. 선택과 집중을 하는 것이죠.</p>\n\n<p>쨋든, 좋은 기회를 얻게 되어서 챗봇을 만들어 보겠습니다.</p>\n\n<p><br /></p>\n\n<h2 i...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>회사에서 챗봇 서비스를 제공하기로 했습니다.</p>\n\n<p>챗봇을 인공지능으로 대응하는 곳이 많다고 하지만, 아직 인공지능에게 온전히 맡기기엔 어려운 상황입니다.</p>\n\n<p>기능을 최소한으로, 하나에 집중해서 만드는 게 더 효과적입니다. 선택과 집중을 하는 것이죠.</p>\n\n<p>쨋든, 좋은 기회를 얻게 되어서 챗봇을 만들어 보겠습니다.</p>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<ol>\n  <li>\n    <p><code class=\"highlighter-rouge\">BotFather</code> 검색하여 사용자 추가하고 대화창에 들어간다. (텔레그램에서)</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">/start</code> 메세지 전송</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> I can help you create and manage Telegram bots. If you're new to the Bot API, please see the manual.\n\n You can control me by sending these commands:\n\n /newbot - create a new bot\n /mybots - edit your bots [beta]\n\n Edit Bots\n /setname - change a bot's name\n /setdescription - change bot description\n /setabouttext - change bot about info\n /setuserpic - change bot profile photo\n /setcommands - change the list of commands\n /deletebot - delete a bot\n\n Bot Settings\n /token - generate authorization token\n /revoke - revoke bot access token\n /setinline - toggle inline mode\n /setinlinegeo - toggle inline location requests\n /setinlinefeedback - change inline feedback settings\n /setjoingroups - can your bot be added to groups?\n /setprivacy - toggle privacy mode in groups\n\n Games\n /mygames - edit your games [beta]\n /newgame - create a new game\n /listgames - get a list of your games\n /editgame - edit a game\n /deletegame - delete an existing game\n</code></pre></div>    </div>\n\n    <p>메뉴얼이 답장으로 옵니다.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">/newbot</code> 메세지 전송</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Alright, a new bot. How are we going to call it? Please choose a name for your bot.\n</code></pre></div>    </div>\n\n    <p>만들 봇의 닉네임(이름)을 지어주라고 답장이 와요.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">nickname</code> 전송</p>\n\n    <p>username과 헷갈리지 마셔요. 이건 다른 봇이나 계정과 중복되도 상관없어요.</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Good. Now let's choose a username for your bot. It must end in `bot`. Like this, for example: TetrisBot or tetris_bot.\n</code></pre></div>    </div>\n\n    <p>이제 username을 보내라고 답장으로 알려주죠.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">username</code> 전송</p>\n\n    <ul>\n      <li>규칙 1: 다른 username과 중복되면 안된다.</li>\n      <li>규칙 2: <strong>bot</strong>으로 끝나야 된다. <em>_bot, bot, Bot, BOT</em> 대소문자 구분없음.</li>\n    </ul>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> Done! Congratulations on your new bot. You will find it at t.me/sunnytestbot. You can now add a description, about section and profile picture for your bot, see /help for a list of commands. By the way, when you've finished creating your cool bot, ping our Bot Support if you want a better username for it. Just make sure the bot is fully operational before you do this.\n\n Use this token to access the HTTP API:\n 561471433:AAEeWZ7KdcqjYc4ujyufJHuKl8EpPQC3MdY\n\n For a description of the Bot API, see this page: https://core.telegram.org/bots/api\n</code></pre></div>    </div>\n\n    <p>봇이 만들어졌다며 축하메세지가 도착했습니다.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p>정보 저장해두기</p>\n\n    <p>위의 메세지는 많은 정보를 갖고 있는데, 그 중에서도 아래 두개는 꼭 저장해주세요.</p>\n\n    <ul>\n      <li>토큰: 561471433:AAEeWZ7KdcqjYc4ujyufJHuKl8EpPQC3MdY</li>\n      <li>프로필 주소: t.me/sunnytestbot</li>\n    </ul>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">username</code>을 검색한다.</p>\n\n    <p>결과로 내가 만든 봇의 <code class=\"highlighter-rouge\">nickname</code>이 뜨는걸 확인할 수 있습니다.</p>\n\n    <p><br /></p>\n  </li>\n  <li>\n    <p><code class=\"highlighter-rouge\">/start</code> 메세지 전송</p>\n\n    <p>모든 봇은 <em>/start</em> 메세지와 함께 시작합니다.</p>\n  </li>\n</ol>\n\n<p><br />\n<br /></p>\n\n<p>그럼 이제 봇을 본격적으로 시작해보겠습니다.</p>\n\n<p><br /></p>\n\n<blockquote>\n  <ul>\n    <li>참고</li>\n  </ul>\n\n  <p><a href=\"https://core.telegram.org/bots/api\">Telegram Bot API Document</a></p>\n</blockquote>\n\n"
      } ,
   
      {
        "title"    : "Welcome",
        "category" : "",
        "tags"     : " TeXt",
        "url"      : "/2018/07/01/welcome.html",
        "date"     : "July 1, 2018",
        "excerpt"  : "<p>If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:</p>\n\n<p>You may want to <a href=\"https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration\">config the site</a> or <a href=\"https://tianqi.name/jekyll-T...",
        "content"  : "<p>If you see this page, that means you have setup your site. enjoy! :ghost: :ghost: :ghost:</p>\n\n<p>You may want to <a href=\"https://tianqi.name/jekyll-TeXt-theme/docs/en/configuration\">config the site</a> or <a href=\"https://tianqi.name/jekyll-TeXt-theme/docs/en/writing-posts\">writing a post</a> next. Please feel free to <a href=\"https://github.com/kitian616/jekyll-TeXt-theme/issues\">create an issue</a> or <a href=\"mailto:kitian616@outlook.com\">send me email</a> if you have any questions.</p>\n\n<!--more-->\n\n<hr />\n\n<p>If you like TeXt, don’t forget to give me a star. :star2:</p>\n\n<iframe src=\"https://ghbtns.com/github-btn.html?user=kitian616&amp;repo=jekyll-TeXt-theme&amp;type=star&amp;count=true\" frameborder=\"0\" scrolling=\"0\" width=\"170px\" height=\"20px\"></iframe>\n"
      } ,
   
      {
        "title"    : "bot/ telegram bot",
        "category" : "",
        "tags"     : " bot, telegram",
        "url"      : "/2018/06/25/telegrambot.html",
        "date"     : "June 25, 2018",
        "excerpt"  : "<p>https://core.telegram.org/bots/api</p>\n\n<p>봇은 키워드 설정을 잘해야한다\nmessage, callback_query\ninline keyboard - url, callback_data</p>\n\n<p><br /></p>\n\n<p>##getUpdate</p>\n\n<p>https://api.telegram.org/bot561471433:AAEeWZ7KdcqjYc4ujyufJHuKl8EpPQC3MdY/getUpd...",
        "content"  : "<p>https://core.telegram.org/bots/api</p>\n\n<p>봇은 키워드 설정을 잘해야한다\nmessage, callback_query\ninline keyboard - url, callback_data</p>\n\n<p><br /></p>\n\n<p>##getUpdate</p>\n\n<p>https://api.telegram.org/bot561471433:AAEeWZ7KdcqjYc4ujyufJHuKl8EpPQC3MdY/getUpdates</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"ok\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n        </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"err\">`</span><span class=\"s2\">\"update_id\"</span><span class=\"err\">`</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">144932917</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"message\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n                </span><span class=\"err\">`</span><span class=\"s2\">\"message_id\"</span><span class=\"err\">`</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"s2\">\"from\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">604252092</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"is_bot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"SunHo\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Lee\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"language_code\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"ko-KR\"</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"s2\">\"chat\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n                    </span><span class=\"err\">`</span><span class=\"s2\">\"id\"</span><span class=\"err\">`</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">604252092</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"SunHo\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Lee\"</span><span class=\"p\">,</span><span class=\"w\">\n                    </span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"private\"</span><span class=\"w\">\n                </span><span class=\"p\">},</span><span class=\"w\">\n                </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1529892301</span><span class=\"p\">,</span><span class=\"w\">\n                </span><span class=\"err\">`</span><span class=\"s2\">\"text\"</span><span class=\"err\">`</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"nice\"</span><span class=\"w\">\n            </span><span class=\"p\">}</span><span class=\"w\">\n        </span><span class=\"p\">}</span><span class=\"w\">\n    </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p>polling: 특정 시간마다 계속 불러온다</p>\n\n<p>Webhook이 있으나 드러워서 안써~ 느리고, 죽고.. HTTPS도 까다롭게 필요하고..</p>\n\n<p><br /></p>\n\n<p>##sendMessage</p>\n\n<p>https://core.telegram.org/bots/api#sendmessage</p>\n\n<p>https://api.telegram.org/bot561471433:AAEeWZ7KdcqjYc4ujyufJHuKl8EpPQC3MdY/sendMessage</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"ok\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"result\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n        </span><span class=\"s2\">\"message_id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"from\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">561471433</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"is_bot\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"username\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"sunnytestbot\"</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"s2\">\"chat\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n            </span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">604252092</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"SunHo\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"last_name\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Lee\"</span><span class=\"p\">,</span><span class=\"w\">\n            </span><span class=\"s2\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"private\"</span><span class=\"w\">\n        </span><span class=\"p\">},</span><span class=\"w\">\n        </span><span class=\"s2\">\"date\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1529892458</span><span class=\"p\">,</span><span class=\"w\">\n        </span><span class=\"s2\">\"text\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"to meet you\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "Flask Basic",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2018/03/25/flask-basic.html",
        "date"     : "March 25, 2018",
        "excerpt"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from flask import Flask, request, make_response, jsonify, send_file\nimport io\n\napp <span class=\"o\">=</span> Flask<span class=\"o\">(</span>__name__<spa...",
        "content"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from flask import Flask, request, make_response, jsonify, send_file\nimport io\n\napp <span class=\"o\">=</span> Flask<span class=\"o\">(</span>__name__<span class=\"o\">)</span>\n\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/'</span><span class=\"o\">)</span>\ndef hello_world<span class=\"o\">()</span>:\n    <span class=\"k\">return</span> <span class=\"s1\">'Hello World!'</span>\n\n\n<span class=\"c\">#: 하나의 함수, 여러 메소드 설정</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/methods'</span>, <span class=\"nv\">methods</span><span class=\"o\">=[</span><span class=\"s1\">'GET'</span>, <span class=\"s1\">'POST'</span>, <span class=\"s1\">'PUT'</span>, <span class=\"s1\">'DELETE'</span><span class=\"o\">])</span>\ndef tutorial6<span class=\"o\">()</span>:\n    <span class=\"k\">if </span>request.method <span class=\"o\">==</span> <span class=\"s1\">'GET'</span>: <span class=\"k\">return</span> <span class=\"s1\">'조회를 하고 싶을 때는 GET을 써주세요'</span>\n    <span class=\"k\">elif </span>request.method <span class=\"o\">==</span> <span class=\"s1\">'POST'</span>: <span class=\"k\">return</span> <span class=\"s1\">'새로운 데이터를 만들 때는 POST를 써주세요'</span>\n    <span class=\"k\">elif </span>request.method <span class=\"o\">==</span> <span class=\"s1\">'PUT'</span>: <span class=\"k\">return</span> <span class=\"s1\">'수정을 할 때는 PUT을 써주세요'</span>\n    <span class=\"k\">elif </span>request.method <span class=\"o\">==</span> <span class=\"s1\">'DELETE'</span>: <span class=\"k\">return</span> <span class=\"s1\">'삭제를 할 때는 DELETE를 써주세요'</span>\n\n\n<span class=\"s1\">'''\n참고\nhttp://flask.pocoo.org/docs/0.12/api/#incoming-request-data\n'''</span>\n\n<span class=\"c\">#: 동적 라우팅 파라미터</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/parameters/string/&lt;parameter1&gt;/num/&lt;int:parameter2&gt;'</span><span class=\"o\">)</span>\ndef tutorial1<span class=\"o\">(</span>parameter1, parameter2<span class=\"o\">)</span>:\n    <span class=\"s1\">'''\n    :param parameter1: 데이터 타입을 정해주지 않으면 default로 string으로 처리된다.\n    :param parameter2: 데이터 타입을 정해주면 해당 데이터 타입으로만 받을 수 있다.\n\n    :return: 결과값을 json으로 HTTP 상태코드와 함께 출력해준다.\n    '''</span>\n    <span class=\"k\">return </span>make_response<span class=\"o\">(</span>jsonify<span class=\"o\">(</span><span class=\"nv\">parameter1</span><span class=\"o\">=</span>parameter1, <span class=\"nv\">parameter2</span><span class=\"o\">=</span>parameter2<span class=\"o\">)</span>, 200<span class=\"o\">)</span>\n\n\n<span class=\"c\">#: 쿼리 스트링</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/queryString'</span><span class=\"o\">)</span>\ndef tutorial2<span class=\"o\">()</span>:\n    <span class=\"s1\">'''\n    /tutorial?qw=something 같이 요청한다.\n    쿼리스트링은 데이터타입이 string이기 때문에 int를 받으려면 int(qs)로 변환시켜주어야한다.\n    '''</span>\n    <span class=\"c\"># get()함수를 쓰는 이유: 만약 요청에 포함되지 않았을 때 None으로 들어오게하여 에러 처리를 보다 쉽게 할 수 있다.</span>\n    <span class=\"c\">#query_string = request.args.get('qs', None)</span>\n\n    <span class=\"c\"># 특정 파라미터가 아닌 입력된 모든 파라미터를 받고 싶은 경우</span>\n    query_string <span class=\"o\">=</span> request.args\n    <span class=\"k\">return </span>make_response<span class=\"o\">(</span>jsonify<span class=\"o\">(</span>query_string<span class=\"o\">)</span>, 200<span class=\"o\">)</span>\n\n\n<span class=\"c\">#: 폼 데이터 받기</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/form'</span>, <span class=\"nv\">methods</span><span class=\"o\">=[</span><span class=\"s1\">'POST'</span><span class=\"o\">])</span>\ndef tutorial3<span class=\"o\">()</span>:\n    <span class=\"s1\">'''\n    데이터는 POST, PUT 메소드를 사용하는 것을 추천합니다.\n    '''</span>\n    form <span class=\"o\">=</span> request.form.get<span class=\"o\">(</span><span class=\"s1\">'form'</span>, None<span class=\"o\">)</span>\n    <span class=\"k\">return </span>make_response<span class=\"o\">(</span>jsonify<span class=\"o\">(</span><span class=\"nv\">form</span><span class=\"o\">=</span>form<span class=\"o\">)</span>, 200<span class=\"o\">)</span>\n\n\n<span class=\"c\">#: 쿼리스트링과 폼 구분없이 데이터 받기</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/data'</span>, <span class=\"nv\">methods</span><span class=\"o\">=[</span><span class=\"s1\">'POST'</span><span class=\"o\">])</span>\ndef tutorial4<span class=\"o\">()</span>:\n    <span class=\"s1\">'''\n    values를 통해 쿼리스트링과 폼의 구분없이 데이터를 받을 수 있다.\n\n    만약 쿼리스트링과 폼 동시에 데이터가 올 경우 쿼리스트링의 값을 받는다.\n    getlist()로 받으면 어디서 들어오든, 동시에 들어오든 상관없이 배열로 받을 수 있다.\n    '''</span>\n    data1 <span class=\"o\">=</span> request.values.get<span class=\"o\">(</span><span class=\"s1\">'data1'</span>, None<span class=\"o\">)</span>\n    data2 <span class=\"o\">=</span> request.values.getlist<span class=\"o\">(</span><span class=\"s1\">'data2'</span>, None<span class=\"o\">)</span>\n    <span class=\"k\">return </span>make_response<span class=\"o\">(</span>jsonify<span class=\"o\">(</span><span class=\"nv\">data1</span><span class=\"o\">=</span>data1, <span class=\"nv\">data2</span><span class=\"o\">=</span>data2<span class=\"o\">)</span>, 200<span class=\"o\">)</span>\n\n\n<span class=\"c\">#: 이미지 입출력</span>\n@app.route<span class=\"o\">(</span><span class=\"s1\">'/tutorial/image'</span>, <span class=\"nv\">methods</span><span class=\"o\">=[</span><span class=\"s1\">'POST'</span><span class=\"o\">])</span>\ndef tutorial5<span class=\"o\">()</span>:\n    <span class=\"s1\">'''\n    request.files는 byte로 오기 때문에 출력할 때 io.BytesIO를 이용해야한다.\n    '''</span>\n    img <span class=\"o\">=</span> request.files.get<span class=\"o\">(</span><span class=\"s1\">'img'</span>, None<span class=\"o\">)</span>\n    filename <span class=\"o\">=</span> img.filename\n    mimetype <span class=\"o\">=</span> img.content_type\n    img <span class=\"o\">=</span> img.read<span class=\"o\">()</span>\n    <span class=\"k\">return </span>send_file<span class=\"o\">(</span>io.BytesIO<span class=\"o\">(</span>img<span class=\"o\">)</span>, <span class=\"nv\">attachment_filename</span><span class=\"o\">=</span>filename<span class=\"o\">)</span>\n\n\n\n<span class=\"k\">if </span>__name__ <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span>:\n    app.run<span class=\"o\">()</span>\n\n</code></pre></div></div>\n"
      } ,
   
      {
        "title"    : "Steem Python",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2018/03/07/steem-python.html",
        "date"     : "March 7, 2018",
        "excerpt"  : "<h2 id=\"steem-python\">Steem Python</h2>\n\n<h3 id=\"steem-설치시-scrypt-에러-발생\">steem 설치시 scrypt 에러 발생</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  scrypt-1.2.0/libcperciva/crypto/crypto_aes.c:...",
        "content"  : "<h2 id=\"steem-python\">Steem Python</h2>\n\n<h3 id=\"steem-설치시-scrypt-에러-발생\">steem 설치시 scrypt 에러 발생</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>  scrypt-1.2.0/libcperciva/crypto/crypto_aes.c:6:10: fatal error: <span class=\"s1\">'openssl/aes.h'</span> file not found\n  <span class=\"c\">#include &lt;openssl/aes.h&gt;</span>\n           ^~~~~~~~~~~~~~~\n  1 error generated.\n  error: <span class=\"nb\">command</span> <span class=\"s1\">'/usr/bin/clang'</span> failed with <span class=\"nb\">exit </span>status 1\n  \n  <span class=\"nt\">----------------------------------------</span>\n  Failed building wheel <span class=\"k\">for </span>scrypt\n</code></pre></div></div>\n\n<ul>\n  <li>해결 방법\nhttps://pypi.python.org/pypi/scrypt/</li>\n</ul>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span><span class=\"nb\">export </span><span class=\"nv\">CFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-I</span><span class=\"k\">$(</span>brew <span class=\"nt\">--prefix</span> openssl<span class=\"k\">)</span><span class=\"s2\">/include </span><span class=\"nv\">$CFLAGS</span><span class=\"s2\">\"</span>\n<span class=\"nv\">$ </span><span class=\"nb\">export </span><span class=\"nv\">LDFLAGS</span><span class=\"o\">=</span><span class=\"s2\">\"-L</span><span class=\"k\">$(</span>brew <span class=\"nt\">--prefix</span> openssl<span class=\"k\">)</span><span class=\"s2\">/lib </span><span class=\"nv\">$LDFLAGS</span><span class=\"s2\">\"</span>\n</code></pre></div></div>\n<p>이건 맥에서만 쓰는거…ㅋㅋ…</p>\n\n<p>에러천지네..ㅎㅎ</p>\n\n<p>https://steemit.com/kr/@recrack/python-steemit-2-2-warning-urllib3-connectionpool-retrying-error</p>\n\n<p>https://steemit.com/kr/@recrack/python-steemit-2-1-steempy-toml-version-error</p>\n\n<p>{‘active’: {‘account_autos’: [],</p>\n\n<p>​            ‘key_auths’: [[‘STM5Mod7sjz6tufLYg9RG3W5kfA6moYcK2CZ1odoVrTaqW59KJgYy’,</p>\n\n<p>​                           1]],</p>\n\n<p>​            ‘weight_threshold’: 1},</p>\n\n<p>‘active_challenged’: False,</p>\n\n<p>‘average_bandwidth’: ‘25624021954’,</p>\n\n<p>‘average_market_bandwidth’: 0,</p>\n\n<p>‘balance’: ‘0.001 STEEM’,</p>\n\n<p>‘can_vote’: True,</p>\n\n<p>‘comment_count’: 0,</p>\n\n<p>‘created’: ‘2018-01-18T12:13:03’,</p>\n\n<p>‘curation_rewards’: 96,</p>\n\n<p>‘delegated_vesting_shares’: ‘0.000000 VESTS’,</p>\n\n<p>‘guest_bloggers’: [],</p>\n\n<p>‘id’: 611001,</p>\n\n<p>‘json_metadata’: ‘{“profile”:{“profile_image”:”https://steemitimages.com/DQmRNRoLYQ6L2UX6z7HFiVCMQ5TervPcBnGsGheuxFpZYUY/steemprofile.jpg”}}’,</p>\n\n<p>‘last_account_recovery’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘last_account_update’: ‘2018-02-08T05:51:18’,</p>\n\n<p>‘last_active_proved’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘last_bandwidth_update’: ‘2018-03-07T03:00:00’,</p>\n\n<p>‘last_market_bandwidth_update’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘last_owner_proved’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘last_owner_update’: ‘2018-01-18T12:16:57’,</p>\n\n<p>‘last_post’: ‘2018-03-07T03:00:00’,</p>\n\n<p>‘last_root_post’: ‘2018-03-06T09:46:06’,</p>\n\n<p>‘last_vote_time’: ‘2018-03-07T02:55:30’,</p>\n\n<p>‘lifetime_bandwidth’: ‘137189000000’,</p>\n\n<p>‘lifetime_market_bandwidth’: 0,</p>\n\n<p>‘lifetime_vote_count’: 0,</p>\n\n<p>‘market_history’: [],</p>\n\n<p>‘memo_key’: ‘STM5gM7Bgs3PoJEQjmkHs9oBxZVk6duYKpk6upUv7XrmKMfQFtcin’,</p>\n\n<p>‘mined’: False,</p>\n\n<p>‘name’: ‘ciceron’,</p>\n\n<p>‘next_vesting_withdrawal’: ‘1969-12-31T23:59:59’,</p>\n\n<p>‘other_history’: [],</p>\n\n<p>‘owner’: {‘account_auths’: [],</p>\n\n<p>​           ‘key_auths’: [[‘STM7pzw4AjWWp6d41QwdMZZ2y6yVuzobxguFpcB7UToby3Z489erV’,</p>\n\n<p>​                          1]],</p>\n\n<p>​           ‘weight_threshold’: 1},</p>\n\n<p>‘owner_challenged’: False,</p>\n\n<p>‘post_count’: 91,</p>\n\n<p>‘post_history’: [],</p>\n\n<p>‘posting’: {‘account_auths’: [],</p>\n\n<p>​             ‘key_auths’: [[‘STM61niVHbenbHzQP94Gg7EqbG3tGCTv6SoxWPhPWegZgoTFd3Bkb’,</p>\n\n<p>​                            1]],</p>\n\n<p>​             ‘weight_threshold’: 1},</p>\n\n<p>‘posting_rewards’: 7281,</p>\n\n<p>‘proxied_vsf_votes’: [0, 0, 0, 0],</p>\n\n<p>‘proxy’: ‘’,</p>\n\n<p>‘received_vesting_shares’: ‘942349.156248 VESTS’,</p>\n\n<p>‘recovery_account’: ‘steem’,</p>\n\n<p>‘reputation’: ‘93676959734’,</p>\n\n<p>‘reset_account’: ‘null’,</p>\n\n<p>‘reward_sbd_balance’: ‘2.484 SBD’,</p>\n\n<p>‘reward_steem_balance’: ‘0.000 STEEM’,</p>\n\n<p>‘reward_vesting_balance’: ‘1584.965516 VESTS’,</p>\n\n<p>‘reward_vesting_steem’: ‘0.776 STEEM’,</p>\n\n<p>‘savings_balance’: ‘0.000 STEEM’,</p>\n\n<p>‘savings_sbd_balance’: ‘0.000 SBD’,</p>\n\n<p>‘savings_sbd_last_interest_payment’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘savings_sbd_seconds’: ‘0’,</p>\n\n<p>‘savings_sbd_seconds_last_update’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘savings_withdraw_requests’: 0,</p>\n\n<p>‘sbd_balance’: ‘10.650 SBD’,</p>\n\n<p>‘sbd_last_interest_payment’: ‘1970-01-01T00:00:00’,</p>\n\n<p>‘sbd_seconds’: ‘0’,</p>\n\n<p>‘sbd_seconds_last_update’: ‘2018-03-02T05:10:33’,</p>\n\n<p>‘tags_usage’: [],</p>\n\n<p>‘to_withdraw’: 0,</p>\n\n<p>‘transfer_history’: [],</p>\n\n<p>‘vesting_balance’: ‘0.000 STEEM’,</p>\n\n<p>‘vesting_shares’: ‘7085.502292 VESTS’,</p>\n\n<p>‘vesting_withdraw_rate’: ‘0.000000 VESTS’,</p>\n\n<p>‘vote_history’: [],</p>\n\n<p>‘voting_power’: 9800,</p>\n\n<p>‘withdraw_routes’: 0,</p>\n\n<p>‘withdrawn’: 0,</p>\n\n<p>‘witness_votes’: [],</p>\n\n<p>‘witnesses_voted_for’: 0}</p>\n\n<p>Process finished with exit code 0</p>\n\n"
      } ,
   
      {
        "title"    : "Flask Logging",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2018/03/04/flask-logging.html",
        "date"     : "March 4, 2018",
        "excerpt"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from datetime import datetime\nimport logging.handlers\n\n<span class=\"c\"># 로거 인스턴스를 만든다</span>\nlogger <span class=\"o\">=</span> logging.getLogger<span c...",
        "content"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>from datetime import datetime\nimport logging.handlers\n\n<span class=\"c\"># 로거 인스턴스를 만든다</span>\nlogger <span class=\"o\">=</span> logging.getLogger<span class=\"o\">(</span><span class=\"s1\">'mylogger'</span><span class=\"o\">)</span>\n\n<span class=\"c\"># 포매터를 만든다</span>\nfomatter <span class=\"o\">=</span> logging.Formatter<span class=\"o\">(</span><span class=\"s1\">'[%(levelname)s|%(filename)s:%(lineno)s] %(asctime)s \\n&gt; %(message)s\\n'</span><span class=\"o\">)</span>\n\nudate <span class=\"o\">=</span> str<span class=\"o\">(</span>datetime.utcnow<span class=\"o\">()</span>.strftime<span class=\"o\">(</span><span class=\"s1\">'%Y%m%d%H%M%S'</span><span class=\"o\">))</span>\nfilename <span class=\"o\">=</span> <span class=\"s1\">'../logs/'</span> + udate + <span class=\"s1\">'.log'</span>\n\n<span class=\"c\"># 환경변수를 읽어서 로깅 레벨과 로그를 남길 파일의 경로를 변수에 저장한다</span>\n<span class=\"c\"># if (os.environ['NODE_ENV'] == 'local'):</span>\n<span class=\"c\">#     loggerLevel = logging.DEBUG</span>\n<span class=\"c\">#     filename = '/tmp/test.log'</span>\n<span class=\"c\"># elif(os.environ['NODE_ENV'] == 'test'):</span>\n<span class=\"c\">#     loggerLevel = logging.DEBUG</span>\n<span class=\"c\">#     filename = '/home/www/log/testServer.log'</span>\n<span class=\"c\"># else:</span>\n<span class=\"c\">#     loggerLevel = logging.INFO</span>\n<span class=\"c\">#     filename = '/home/www/log/server.log'</span>\n\n\n<span class=\"c\"># 스트림과 파일로 로그를 출력하는 핸들러를 각각 만든다.</span>\n<span class=\"c\"># fileHandler = logging.FileHandler(filename)</span>\nfileMaxByte <span class=\"o\">=</span> 1024 <span class=\"k\">*</span> 1024 <span class=\"k\">*</span> 100  <span class=\"c\"># 100MB</span>\nfileHandler <span class=\"o\">=</span> logging.handlers.RotatingFileHandler<span class=\"o\">(</span>filename, <span class=\"nv\">maxBytes</span><span class=\"o\">=</span>fileMaxByte, <span class=\"nv\">backupCount</span><span class=\"o\">=</span>1000<span class=\"o\">)</span>\nstreamHandler <span class=\"o\">=</span> logging.StreamHandler<span class=\"o\">()</span>\n\n<span class=\"c\"># 각 핸들러에 포매터를 지정한다.</span>\nfileHandler.setFormatter<span class=\"o\">(</span>fomatter<span class=\"o\">)</span>\nstreamHandler.setFormatter<span class=\"o\">(</span>fomatter<span class=\"o\">)</span>\n\n<span class=\"c\"># 로거 인스턴스에 스트림 핸들러와 파일핸들러를 붙인다.</span>\nlogger.addHandler<span class=\"o\">(</span>fileHandler<span class=\"o\">)</span>\nlogger.addHandler<span class=\"o\">(</span>streamHandler<span class=\"o\">)</span>\n\n<span class=\"c\"># 로거 인스턴스로 로그를 찍는다.</span>\nlogger.setLevel<span class=\"o\">(</span>logging.DEBUG<span class=\"o\">)</span>\nlogger.debug<span class=\"o\">(</span><span class=\"s2\">\"===========================\"</span><span class=\"o\">)</span>\nlogger.info<span class=\"o\">(</span><span class=\"s2\">\"TEST START\"</span><span class=\"o\">)</span>\nlogger.warning<span class=\"o\">(</span><span class=\"s2\">\"파일 명과 로깅 레벨을 각각 환경마다 다르게 남도록 했어요.\"</span><span class=\"o\">)</span>\nlogger.debug<span class=\"o\">(</span><span class=\"s2\">\"디버그 로그는 테스트 환경과 로컬 피씨에서남 남는 답니다.\"</span><span class=\"o\">)</span>\nlogger.critical<span class=\"o\">(</span><span class=\"s2\">\"치명적인 버그는 꼭 파일로 남기기도 하고 메일로 발송하세요!\"</span><span class=\"o\">)</span>\nlogger.debug<span class=\"o\">(</span><span class=\"s2\">\"===========================\"</span><span class=\"o\">)</span>\nlogger.info<span class=\"o\">(</span><span class=\"s2\">\"TEST END!\"</span><span class=\"o\">)</span>\n\n</code></pre></div></div>\n"
      } ,
   
      {
        "title"    : "aws+python/ boto3, the AWS SDK for Python",
        "category" : "",
        "tags"     : " aws, python, linux, macos",
        "url"      : "/2018/02/05/aws-s3.html",
        "date"     : "February 5, 2018",
        "excerpt"  : "<h2 id=\"issue\">issue</h2>\n\n<p>사용자 프로필 사진을 S3에 저장하기</p>\n\n<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>AWS</li>\n  <li>python3</li>\n  <li>flask</li>\n  <li>mac</li>\n</ul>\n\n<h3 id=\"my-app-structure\">my app structure</h3>\n\n<blockquote>\n  <p>보다 쉬운 설명을 위해 나의 <code...",
        "content"  : "<h2 id=\"issue\">issue</h2>\n\n<p>사용자 프로필 사진을 S3에 저장하기</p>\n\n<h3 id=\"spec\">spec</h3>\n\n<ul>\n  <li>AWS</li>\n  <li>python3</li>\n  <li>flask</li>\n  <li>mac</li>\n</ul>\n\n<h3 id=\"my-app-structure\">my app structure</h3>\n\n<blockquote>\n  <p>보다 쉬운 설명을 위해 나의 <code class=\"highlighter-rouge\">flask</code> 프로젝트 폴더 구조를 알려드리겠습니다.</p>\n</blockquote>\n\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>my_project\n├─ app\n│   ├─ __init__.py\n│   └─ modules\n│       ├─ __init__.py\n│       ├─ urls.py\n│       ├─ controllers.py\n│       └─ models.py\n├─ config.py\n├─ requirements.txt\n└─ run.py\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"process\">process</h2>\n\n<h3 id=\"install\">Install</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>brew <span class=\"nb\">install </span>awscli\n<span class=\"nv\">$ </span>aws configure\n</code></pre></div></div>\n<p>awscli 설치 후, configuration를 해줍니다.</p>\n\n<p><br /></p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>pip <span class=\"nb\">install </span>boto3\n</code></pre></div></div>\n\n<h3 id=\"configuration\">Configuration</h3>\n\n<ol>\n  <li>\n    <p><em>config.py</em> 수정</p>\n\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> AWS_ACCESS_KEY_ID = 'your key id'\n AWS_SECRET_ACCESS_KEY = 'you secret key'\n REGION = 'ap-northeast-1'\n</code></pre></div>    </div>\n\n    <p><br /></p>\n  </li>\n  <li><em>app/__init__.py</em> 수정\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">import</span> <span class=\"nn\">config</span>\n <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">from_object</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n</code></pre></div>    </div>\n\n    <p><br /></p>\n  </li>\n  <li>boto3를 사용할  파이썬 파일에서 설정\n    <div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code> <span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n <span class=\"n\">S3</span> <span class=\"o\">=</span> <span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">(</span>\n <span class=\"s\">'s3'</span><span class=\"p\">,</span>\n <span class=\"n\">aws_access_key_id</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'AWS_ACCESS_KEY_ID'</span><span class=\"p\">],</span>\n <span class=\"n\">aws_secret_access_key</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s\">'AWS_SECRET_ACCESS_KEY'</span><span class=\"p\">]</span>\n <span class=\"c1\"># aws_session_token=SESSION_TOKEN,\n</span> <span class=\"p\">)</span>\n    \n <span class=\"n\">BUCKET_NAME</span> <span class=\"o\">=</span> <span class=\"s\">'your_bucket_name'</span>\n <span class=\"n\">BUCKET_FOLDER</span> <span class=\"o\">=</span> <span class=\"s\">'folder_name/'</span>\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<p><br /></p>\n\n<h3 id=\"usage\">usage</h3>\n\n<h4 id=\"데이터-저장하기\">데이터 저장하기</h4>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">S3</span><span class=\"o\">.</span><span class=\"n\">upload_fileobj</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">),</span> <span class=\"n\">BUCKET_NAME</span><span class=\"p\">,</span> <span class=\"n\">BUCKET_FOLDER</span> <span class=\"o\">+</span> <span class=\"s\">'s3key'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>byte object로 올려야 하기 때문에 <code class=\"highlighter-rouge\">io.BytesIO</code>로 감싸주세요.</p>\n\n<p><em>s3key</em> 는 S3에 저장될 데이터의 이름이므로 중복되면 안됩니다.</p>\n\n<p><br /></p>\n\n<h5 id=\"with-flask\">with flask</h5>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># 요청으로 들어온 file 받기\n</span><span class=\"n\">picture</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s\">'picture'</span><span class=\"p\">,</span> <span class=\"bp\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 파일을 읽어들인다\n</span><span class=\"n\">pic</span> <span class=\"o\">=</span> <span class=\"n\">picture</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">pic_name</span> <span class=\"o\">=</span> <span class=\"n\">picture</span><span class=\"o\">.</span><span class=\"n\">filename</span>\n\n<span class=\"c1\"># 나중에 데이터를 불러와서 응답으로 보낼 때를 대비하여 따로 저장하는 것을 추천합니다.\n</span><span class=\"n\">mimetype</span> <span class=\"o\">=</span> <span class=\"n\">picture</span><span class=\"o\">.</span><span class=\"n\">content_type</span>\n\n<span class=\"n\">S3</span><span class=\"o\">.</span><span class=\"n\">upload_fileobj</span><span class=\"p\">(</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">pic</span><span class=\"p\">),</span> <span class=\"n\">BUCKET_NAME</span><span class=\"p\">,</span> <span class=\"n\">BUCKET_FOLDER</span> <span class=\"o\">+</span> <span class=\"n\">pic_name</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h4 id=\"데이터-불러오기\">데이터 불러오기</h4>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">S3</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">(</span>\n<span class=\"n\">Bucket</span><span class=\"o\">=</span><span class=\"n\">BUCKET_NAME</span><span class=\"p\">,</span>\n<span class=\"n\">Key</span><span class=\"o\">=</span><span class=\"n\">BUCKET_FOLDER</span> <span class=\"o\">+</span> <span class=\"s\">'s3key'</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n<p>s3key는 S3에 저장된 데이터의 이름이다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">picture</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s\">'Body'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</code></pre></div></div>\n<p>불러온 데이터는 byte object로 나오기 때문에  <code class=\"highlighter-rouge\">io.BytesIO</code>를 사용하여 다뤄줘야 한다.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">send_file</span><span class=\"p\">(</span><span class=\"n\">picture</span><span class=\"p\">,</span> <span class=\"n\">mimetype</span><span class=\"o\">=</span><span class=\"s\">'image/jpeg'</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>response를 데이터로 내보내려면 <code class=\"highlighter-rouge\">send_file</code>을 이용하면 된다.</p>\n\n<p><br /></p>\n\n<h6 id=\"참고\">참고</h6>\n\n<ul>\n  <li>\n    <p><a href=\"https://boto3.readthedocs.io/en/latest/guide/quickstart.html\">https://boto3.readthedocs.io/en/latest/guide/quickstart.html</a></p>\n  </li>\n  <li>\n    <p><a href=\"https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/awscli-install-linux-al2017.html\">Amazon Linux 2017에 AWS Command Line Interface 설치</a></p>\n  </li>\n</ul>\n\n<p><br /></p>\n\n<h2 id=\"epilogue\">epilogue</h2>\n\n<p>뭐든 초기 설정이 제일 험난하다.</p>\n"
      } ,
   
      {
        "title"    : "linux/ screen commands",
        "category" : "",
        "tags"     : " Productivity, Software",
        "url"      : "/2017/12/01/openssl.html",
        "date"     : "December 1, 2017",
        "excerpt"  : "<p>OpenSSL 적용하기</p>\n\n<p>https://www.comodossl.co.kr/certificate/ssl-installation-guides/pfx-with-openssl.aspx</p>\n\n",
        "content"  : "<p>OpenSSL 적용하기</p>\n\n<p>https://www.comodossl.co.kr/certificate/ssl-installation-guides/pfx-with-openssl.aspx</p>\n\n"
      } ,
   
      {
        "title"    : "linux/ screen commands",
        "category" : "",
        "tags"     : " Productivity, Software",
        "url"      : "/2017/12/01/linux-screen.html",
        "date"     : "December 1, 2017",
        "excerpt"  : "<p>###스크린 목록 확인</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>user ~ 0 screen <span class=\"nt\">-list</span>\nThere is a screen on:\n\t22879.myscreen\t<span class=\"o\">(<...",
        "content"  : "<p>###스크린 목록 확인</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>user ~ 0 screen <span class=\"nt\">-list</span>\nThere is a screen on:\n\t22879.myscreen\t<span class=\"o\">(</span>2017년 12월 01일 11시 41분 24초<span class=\"o\">)</span>\t<span class=\"o\">(</span>Detached<span class=\"o\">)</span>\n1 Socket <span class=\"k\">in</span> /var/run/screen/S-user.\n</code></pre></div></div>\n\n<p>###스크린 연결 해제</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>screen <span class=\"nt\">-d</span> myscreen\n</code></pre></div></div>\n\n<p>###스크린 삭제</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>pkill screen\n</code></pre></div></div>\n\n<ul>\n  <li>스크린을 강제로 종료합니다.</li>\n</ul>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>screen <span class=\"nt\">-wipe</span>\n</code></pre></div></div>\n\n<ul>\n  <li>wipe 옵션을 써도 된다</li>\n</ul>\n\n"
      } ,
   
      {
        "title"    : "linux/ open&amp;close port",
        "category" : "",
        "tags"     : " problem",
        "url"      : "/2017/11/24/0930-linux-port.html",
        "date"     : "November 24, 2017",
        "excerpt"  : "<h2 id=\"problem\">problem</h2>\n\n<p>development, product 포트를 별도로 관리하기 위해서 새로운 포트를 열어줘야 했다.</p>\n\n<p>나의 기억력이 문제다. \n가끔이지만 종종 필요한, 간단한 명령어인데 기억이 나지 않는다.</p>\n\n<p><br /></p>\n\n<h2 id=\"cause\">cause</h2>\n\n<p>보안을 강화시키기 위해서 방화벽 설정을 엄격하게(귀찮게) 설정해뒀다.</p>\n\n<p>그래서...",
        "content"  : "<h2 id=\"problem\">problem</h2>\n\n<p>development, product 포트를 별도로 관리하기 위해서 새로운 포트를 열어줘야 했다.</p>\n\n<p>나의 기억력이 문제다. \n가끔이지만 종종 필요한, 간단한 명령어인데 기억이 나지 않는다.</p>\n\n<p><br /></p>\n\n<h2 id=\"cause\">cause</h2>\n\n<p>보안을 강화시키기 위해서 방화벽 설정을 엄격하게(귀찮게) 설정해뒀다.</p>\n\n<p>그래서 새로운 포트를 사용하기 위해선 매번 포트 번호를 하나씩 열어줘야한다.</p>\n\n<p><br /></p>\n\n<h2 id=\"solution\">solution</h2>\n\n<h3 id=\"port-check\">port check</h3>\n\n<ul>\n  <li>열려있는 모든 포트 확인</li>\n</ul>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>netstat <span class=\"nt\">-nap</span>\n</code></pre></div></div>\n<p>정말 모든게 다 나와서 정작 내가 원하는 포트 번호를 찾기 어렵다.</p>\n\n<ul>\n  <li>내가 원하는 포트 번호 확인하기</li>\n</ul>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>netstat <span class=\"nt\">-nap</span> | <span class=\"nb\">grep</span> <span class=\"sb\">`</span>port number<span class=\"sb\">`</span>\n</code></pre></div></div>\n\n<ul>\n  <li>현재 <code class=\"highlighter-rouge\">LISTEN</code> 상태인 포트 확인</li>\n</ul>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>netstat <span class=\"nt\">-nap</span> | <span class=\"nb\">grep </span>LISTEN\n</code></pre></div></div>\n<p><br /></p>\n\n<h3 id=\"open-port\">open port</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>iptables <span class=\"nt\">-I</span> INPUT 1 <span class=\"nt\">-p</span> tcp <span class=\"nt\">--dport</span> <span class=\"sb\">`</span>포트번호<span class=\"sb\">`</span> <span class=\"nt\">-j</span> ACCEPT\n</code></pre></div></div>\n\n<table>\n  <tbody>\n    <tr>\n      <td>I</td>\n      <td>insert, 새로운 규칙 추가</td>\n    </tr>\n    <tr>\n      <td>p</td>\n      <td>패킷의 프로토콜 명시</td>\n    </tr>\n    <tr>\n      <td>j</td>\n      <td>규칙에 해당되는 패킷을 어떻게 처리할 것인지</td>\n    </tr>\n  </tbody>\n</table>\n\n<p><em>외부에서 <code class=\"highlighter-rouge\">포트번호</code>로의 연결을 받아들인다</em> 는 규칙을 방화벽 1번 규칙으로 추가한다는 뜻이다.</p>\n\n<p><br /></p>\n\n<h3 id=\"close-port\">close port</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>iptables <span class=\"nt\">-D</span> INPUT <span class=\"nt\">-p</span> tcp <span class=\"nt\">--dport</span> <span class=\"sb\">`</span>포트번호<span class=\"sb\">`</span> <span class=\"nt\">-j</span> ACCEPT\n</code></pre></div></div>\n<p>포트를 닫아줄 땐 <code class=\"highlighter-rouge\">I</code>대신 <code class=\"highlighter-rouge\">D</code>를 넣어주면 된다. delete를 의미한다.</p>\n\n<p><br /></p>\n\n<h2 id=\"key-point-summary\">key point summary</h2>\n\n<p>보안을 위해 필요한 포트만 오픈해둔다.는 점은 사소해 보이지만 보안성을 높여준다.</p>\n\n"
      } ,
   
      {
        "title"    : "How I Rest From Work",
        "category" : "",
        "tags"     : " Holidays, Hawaii",
        "url"      : "/2017/09/12/error-response.html",
        "date"     : "September 12, 2017",
        "excerpt"  : "<h1 id=\"good-error-response\">Good Error Response</h1>\n\n<p><a href=\"https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\">Best Practices for Designing a Pragmatic RESTful API</a></p>\n\n<div class=\"language-json highlighter-rouge\"><d...",
        "content"  : "<h1 id=\"good-error-response\">Good Error Response</h1>\n\n<p><a href=\"https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\">Best Practices for Designing a Pragmatic RESTful API</a></p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"code\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1234</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"message\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Something bad happened :(\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"description\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"More details about the error here\"</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"code\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"message\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Validation Failed\"</span><span class=\"p\">,</span><span class=\"w\">\n  </span><span class=\"s2\">\"errors\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"s2\">\"code\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5432</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"s2\">\"field\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"first_name\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"s2\">\"message\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"First name cannot have fancy characters\"</span><span class=\"w\">\n    </span><span class=\"p\">},</span><span class=\"w\">\n    </span><span class=\"p\">{</span><span class=\"w\">\n       </span><span class=\"s2\">\"code\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">5622</span><span class=\"p\">,</span><span class=\"w\">\n       </span><span class=\"s2\">\"field\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span><span class=\"w\">\n       </span><span class=\"s2\">\"message\"</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Password cannot be blank\"</span><span class=\"w\">\n    </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<p><a href=\"https://blog.mwaysolutions.com/2014/06/05/10-best-practices-for-better-restful-api/\">10 Best Practices for Better RESTful API</a></p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"s2\">\"errors\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"w\">\n   </span><span class=\"p\">{</span><span class=\"w\">\n    </span><span class=\"s2\">\"userMessage\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Sorry, the requested resource does not exist\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"internalMessage\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"No car found in the database\"</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"code\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">34</span><span class=\"p\">,</span><span class=\"w\">\n    </span><span class=\"s2\">\"more info\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"http://dev.mwaysolutions.com/blog/api/v1/errors/12345\"</span><span class=\"w\">\n   </span><span class=\"p\">}</span><span class=\"w\">\n  </span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "Conference on Javascript",
        "category" : "",
        "tags"     : " Js, Conference",
        "url"      : "/2017/09/10/sqlalchemy.html",
        "date"     : "September 10, 2017",
        "excerpt"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s2\">\"\"\"\n    # SQLAlchemy를 사용해봅시다.\n    http://docs.sqlalchemy.org/en/latest/\n\"\"\"</span>\n    \n<span class=\"c\">#: confing 설정</span>\n    DAT...",
        "content"  : "<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"s2\">\"\"\"\n    # SQLAlchemy를 사용해봅시다.\n    http://docs.sqlalchemy.org/en/latest/\n\"\"\"</span>\n    \n<span class=\"c\">#: confing 설정</span>\n    DATABASE_CONFIG <span class=\"o\">=</span> <span class=\"o\">{</span>\n        <span class=\"s1\">'driver'</span>: <span class=\"s1\">'mysql+pymysql'</span>,\n        <span class=\"s1\">'host'</span>: <span class=\"s1\">''</span>,\n        <span class=\"s1\">'dbname'</span>: <span class=\"s1\">''</span>,\n        <span class=\"s1\">'user'</span>: <span class=\"s1\">''</span>,\n        <span class=\"s1\">'password'</span>: <span class=\"s1\">''</span>,\n        <span class=\"s1\">'port'</span>: 3306\n    <span class=\"o\">}</span>\n    SQLALCHEMY_DATABASE_URI <span class=\"o\">=</span> <span class=\"s1\">'{driver}://{user}:{password}@{host}/{dbname}'</span>.format<span class=\"o\">(</span><span class=\"k\">**</span>DATABASE_CONFIG<span class=\"o\">)</span>\n    SQLALCHEMY_TRACK_MODIFICATIONS <span class=\"o\">=</span> True\n\n<span class=\"c\">#: app/__init__ 설정</span>\n<span class=\"c\"># Define the database object which is imported</span>\n<span class=\"c\"># by modules and controllers</span>\ndb <span class=\"o\">=</span> SQLAlchemy<span class=\"o\">(</span>app<span class=\"o\">)</span>\n\n<span class=\"c\"># Build the database:</span>\n<span class=\"c\"># This will create the database file using SQLAlchemy</span>\ndb.create_all<span class=\"o\">()</span>\n\n\n<span class=\"c\">########################################################################</span>\n\n<span class=\"c\"># app/module/model에서 사용하기</span>\nfrom app import db\nfrom sqlalchemy import MetaData, Table, text, and_\n\nconn <span class=\"o\">=</span> db.engine.connect<span class=\"o\">()</span>\nmeta <span class=\"o\">=</span> MetaData<span class=\"o\">(</span><span class=\"nb\">bind</span><span class=\"o\">=</span>db.engine<span class=\"o\">)</span>\nos <span class=\"o\">=</span> Table<span class=\"o\">(</span><span class=\"s1\">'doc_origin_sentences'</span>, meta, <span class=\"nv\">autoload</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n\n<span class=\"c\">#: 여러개의 쿼리를 실행할 때 Transaction 처리를 위해 필요 - UPDATE, INSERT할 떄</span>\ntrans <span class=\"o\">=</span> conn.begin<span class=\"o\">()</span>\ntry:\n    query1 <span class=\"o\">=</span> conn.execute<span class=\"o\">()</span>\n    query2 <span class=\"o\">=</span> conn.execute<span class=\"o\">()</span>\n\n    trans.commit<span class=\"o\">()</span>  <span class=\"c\"># 모든 쿼리를 실행하고 꼭 넣어야 실제 DB에 적용된다.</span>\nexcept:\n    trans.rollback<span class=\"o\">()</span>  <span class=\"c\"># 중간에 에러가 발생한 경우, Rollback()을 위해 넣어준다.</span>\n\n\n<span class=\"c\"># SELECT</span>\nres <span class=\"o\">=</span> conn.execute<span class=\"o\">(</span>os.select<span class=\"o\">(</span>and_<span class=\"o\">(</span><span class=\"sb\">`</span>조건1<span class=\"sb\">`</span>, <span class=\"sb\">`</span>조건2<span class=\"sb\">`</span><span class=\"o\">)))</span>.fetchall<span class=\"o\">()</span>\n\n\u0010# UPDATE\n<span class=\"c\"># p.c.id = p(테이블)의 id라는 c(칼럼)</span>\nres <span class=\"o\">=</span> conn.execute<span class=\"o\">(</span>p.update<span class=\"o\">(</span>p.c.id <span class=\"o\">==</span> pid<span class=\"o\">)</span>, <span class=\"nv\">name</span><span class=\"o\">=</span>name, <span class=\"nv\">status</span><span class=\"o\">=</span>status, <span class=\"nv\">due_date</span><span class=\"o\">=</span>due_date<span class=\"o\">)</span>\n\n<span class=\"c\"># INSERT</span>\nres <span class=\"o\">=</span> conn.execute<span class=\"o\">(</span>p.insert<span class=\"o\">()</span>, <span class=\"nv\">name</span><span class=\"o\">=</span>name, <span class=\"nv\">due_date</span><span class=\"o\">=</span>due_date, <span class=\"nv\">open_grade</span><span class=\"o\">=</span>open_grade<span class=\"o\">)</span>\n\n\n<span class=\"c\">#: text를 사용하면 일반 쿼리문을 그대로 실행할 수 있습니다</span>\nres <span class=\"o\">=</span> conn.execute<span class=\"o\">(</span>text<span class=\"o\">(</span>\n    <span class=\"s2\">\"\"\"SELECT os.id as sentence_id, d.origin_lang, d.trans_lang, os.text as origin_text\n            , IF(ts.text is not NULL, ts.text, '') as trans_text\n            , IF(ts.status is not NULL, ts.status, 0) as trans_status\n            , IF(ts.type is not NULL, ts.type, 0) as trans_type\n            , IF(comment_cnt is not NULL, comment_cnt, 0) as comment_cnt\n      FROM </span><span class=\"sb\">`</span>marocat v1.1<span class=\"sb\">`</span><span class=\"s2\">.doc_origin_sentences os \n      JOIN docs d ON d.id = os.doc_id\n      LEFT JOIN doc_trans_sentences ts ON ts.origin_id = os.id AND ts.is_deleted = FALSE\n      LEFT JOIN ( SELECT origin_id, COUNT(*) as comment_cnt FROM trans_comments \n                  WHERE is_deleted = FALSE GROUP BY origin_id ) tc ON tc.origin_id = os.id\n      WHERE os.doc_id = :did AND os.is_deleted = FALSE;\"\"\"</span><span class=\"o\">)</span>, <span class=\"nv\">did</span><span class=\"o\">=</span>211<span class=\"o\">)</span>.fetchall<span class=\"o\">()</span>\n\n<span class=\"c\"># fetchall()</span>\n<span class=\"k\">for </span>r <span class=\"k\">in </span>res:\n    print<span class=\"o\">(</span>r<span class=\"o\">)</span>\n    print<span class=\"o\">(</span>r[<span class=\"s1\">'col1'</span><span class=\"o\">])</span>\n\n<span class=\"c\"># fetchone()</span>\ncol1_res <span class=\"o\">=</span> res[<span class=\"s1\">'col1'</span><span class=\"o\">]</span>\n\n\n<span class=\"c\">########################################################################</span>\n\n<span class=\"c\">#: 테이블 autoload하는 방법1</span>\nmeta <span class=\"o\">=</span> MetaData<span class=\"o\">(</span><span class=\"nb\">bind</span><span class=\"o\">=</span>db.engine<span class=\"o\">)</span>\nos <span class=\"o\">=</span> Table<span class=\"o\">(</span><span class=\"s1\">'doc_origin_sentences'</span>, meta, <span class=\"nv\">autoload</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n\n<span class=\"c\">#: 테이블 autoload하는 방법2</span>\nclass User<span class=\"o\">(</span>db.Model<span class=\"o\">)</span>:\n    meta <span class=\"o\">=</span> MetaData<span class=\"o\">(</span><span class=\"nb\">bind</span><span class=\"o\">=</span>db.engine<span class=\"o\">)</span>\n    __table__ <span class=\"o\">=</span> Table<span class=\"o\">(</span><span class=\"s1\">'translation_memory'</span>, meta, <span class=\"nv\">autoload</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n\n<span class=\"c\">#: 방법2 select 사용법</span>\n<span class=\"c\"># res = User.query.all()</span>\n<span class=\"c\"># print(res)</span>\n\n</code></pre></div></div>\n"
      } ,
   
      {
        "title"    : "project/ color picker",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2017/08/08/coloerpicker.html",
        "date"     : "August 8, 2017",
        "excerpt"  : "<p>pick most used colors.</p>\n\n<p>The file format does not matter. At least jpg and png are possible.</p>\n\n<p>사진에서 많이 사용된 색을 골라줍니다. 5개까지 제대로 나오는 듯?</p>\n\n<p>코드를 작성하는 것보다 라이브러리 다운로드 받는게 더더더더더 힘들었습니다..</p>\n\n<h2 id=\"requirements\">Requirements</h2>\n<ul...",
        "content"  : "<p>pick most used colors.</p>\n\n<p>The file format does not matter. At least jpg and png are possible.</p>\n\n<p>사진에서 많이 사용된 색을 골라줍니다. 5개까지 제대로 나오는 듯?</p>\n\n<p>코드를 작성하는 것보다 라이브러리 다운로드 받는게 더더더더더 힘들었습니다..</p>\n\n<h2 id=\"requirements\">Requirements</h2>\n<ul>\n  <li>sklearn</li>\n  <li>numpy</li>\n  <li>matplotlib</li>\n  <li>opencv</li>\n</ul>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">sklearn</span>\n<span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">scipy</span>\n<span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">matplotlib</span>\n<span class=\"n\">pip3</span> <span class=\"n\">install</span> <span class=\"n\">opencv</span><span class=\"o\">-</span><span class=\"n\">python</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"how-to-use\">How to use</h2>\n<h3 id=\"use-with-flask\">use with Flask</h3>\n<ol>\n  <li>Set environment\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>export MPLBACKEND=\"pdf\" or \"Agg\"\n</code></pre></div>    </div>\n  </li>\n  <li>\n    <p>run run.py</p>\n  </li>\n  <li>using Tool like PostMan\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>POST /pick/colors/&lt;int:num&gt;\nHost: localhost:5000\nContent-Type: multipart/form-data\nKye: img\nValues: file, your image\n</code></pre></div>    </div>\n    <p>I recommend that you only include <code class=\"highlighter-rouge\">num</code> up to 5</p>\n  </li>\n  <li>get colors!\n    <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{\n \"colors\": [\n     {\n         \"rgb\": [ 30, 25, 24 ],\n         \"hex\": \"#1e1918\"\n     }\n}\n</code></pre></div>    </div>\n  </li>\n</ol>\n\n<h3 id=\"use-with-argparse\">use with argparse</h3>\n<div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>python pick_colors_with_argparse.py --image images/your_image.png --clusters 3\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h2 id=\"reference\">Reference</h2>\n<ul>\n  <li><a href=\"http://www.pyimagesearch.com/2014/05/26/opencv-python-k-means-color-clustering/\">OpenCV and Python K-Means Color Clustering</a></li>\n  <li><a href=\"http://webnautes.tistory.com/1030\">Ubuntu 16.04에 opencv_contrib 포함하여 OpenCV 3.2 설치</a></li>\n</ul>\n\n"
      } ,
   
      {
        "title"    : "git/ process to `push`",
        "category" : "",
        "tags"     : " git",
        "url"      : "/2017/08/07/1148-git-branch.html",
        "date"     : "August 7, 2017",
        "excerpt"  : "<p>git을 사용하는 이유는 버전 관리를 하기 위해서 입니다.</p>\n\n<p>repository가 여러 군데 있어도 commit은 한 곳에 push되고, 그 버전관리는 commit으로 합니다.</p>\n\n<p>*</p>\n\n<p>오늘은 commit을 push하는 과정에 대해 정리해 보았습니다.\n<br /><br /></p>\n\n<h2 id=\"1-git-add\">1. git add</h2>\n\n<div class=\"language-shell hi...",
        "content"  : "<p>git을 사용하는 이유는 버전 관리를 하기 위해서 입니다.</p>\n\n<p>repository가 여러 군데 있어도 commit은 한 곳에 push되고, 그 버전관리는 commit으로 합니다.</p>\n\n<p>*</p>\n\n<p>오늘은 commit을 push하는 과정에 대해 정리해 보았습니다.\n<br /><br /></p>\n\n<h2 id=\"1-git-add\">1. git add</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git status\n...\n\nChanges not staged <span class=\"k\">for </span>commit:\n<span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n<span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n...수정된 파일 목록...\n</code></pre></div></div>\n<p><code class=\"highlighter-rouge\">git status</code>를 입력하면 수정된 파일 목록과 함께 어떻게 하라는 방법을 제시해줍니다. 친절하게.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 방법 1: 하나씩 걸러 넣을 때</span>\n<span class=\"nv\">$ </span>git add <span class=\"sb\">`</span>file name<span class=\"sb\">`</span>\n\n<span class=\"c\"># 방법 2: 한번에 다 넣을 때</span>\n<span class=\"nv\">$ </span>git add <span class=\"nb\">.</span>\n</code></pre></div></div>\n<p>commit에 반영할 파일들을 <code class=\"highlighter-rouge\">git add</code> 해줍니다.\n제외할거면 <code class=\"highlighter-rouge\">git checkout -- &lt;file&gt;</code> 해주시면 됩니다.\n<br /><br /></p>\n\n<h2 id=\"2-git-commit\">2. git commit</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git commit\n<span class=\"nv\">$ </span>git commit <span class=\"nt\">--amend</span>    <span class=\"c\"># gerrit에서</span>\n</code></pre></div></div>\n<p>수정 사항들을 add 해줬다면 <code class=\"highlighter-rouge\">commit</code>을 해줍니다.</p>\n\n<div class=\"language-vim highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>commit 제목을 입력해주세요\n\n설명을 넣어주세요<span class=\"p\">.</span> 자세할수록 좋아요<span class=\"p\">.</span>\n한줄에 <span class=\"m\">50</span>자 이상은 넣지 않는 것을 추천합니다<span class=\"p\">.</span> 아래의 주석보다 짧기만하면 됩니다<span class=\"p\">.</span>\ncommit 제목과 아래의 주석에 한줄씩 빈 공백을 꼭 넣어주세요<span class=\"p\">.</span> \n설명을 넣지 않는다면 <span class=\"m\">2</span>줄의 빈칸이 들어가겠죠?\n\n# Please enter the commit message <span class=\"k\">for</span> your <span class=\"k\">changes</span><span class=\"p\">.</span> Lines starting\n# with <span class=\"s1\">'#'</span> will be ignored<span class=\"p\">,</span> and an empty message aborts the commit<span class=\"p\">.</span>\n#\n# On branch master\n# Your branch <span class=\"k\">is</span> <span class=\"k\">up</span> <span class=\"k\">to</span> date with <span class=\"s1\">'origin/master'</span><span class=\"p\">.</span>\n#\n# Changes <span class=\"k\">to</span> be committed<span class=\"p\">:</span>\n#       modified<span class=\"p\">:</span>   file01<span class=\"p\">.</span>name\n#       <span class=\"k\">new</span> <span class=\"k\">file</span><span class=\"p\">:</span>   file02<span class=\"p\">.</span>name\n#\n</code></pre></div></div>\n<p>위의 명령어를 입력하면 텍스트 편집창이 뜹니다. 제목과 설명을 다 적었다면 esc키를 누르고 <code class=\"highlighter-rouge\">:wq</code>를 입력하며 빠져나오세요.\n<br /><br /></p>\n\n<h2 id=\"3-git-push\">3. git push</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 방법 1</span>\n<span class=\"nv\">$ </span>git push\n\n<span class=\"c\"># 방법 2</span>\n<span class=\"c\"># 현재 branch가 아니라 다른 branch로 보낼 때 사용할수도 있습니다.</span>\n<span class=\"nv\">$ </span>git push origin HEAD:origin/<span class=\"sb\">`</span>branch 이름<span class=\"sb\">`</span>\n</code></pre></div></div>\n<p>commit을 repository에 적용될 수 있도록 push한다.</p>\n"
      } ,
   
      {
        "title"    : "git/ start",
        "category" : "",
        "tags"     : " git",
        "url"      : "/2017/08/07/1146-git-start.html",
        "date"     : "August 7, 2017",
        "excerpt"  : "<p><a href=\"https://git-scm.com/\">git</a> is version control system.</p>\n\n<p>github, bitbucket 등은 git을 지원하는 소프트웨어, 프로그램이다.\n<br /><br /></p>\n\n<h2 id=\"git-clone\">git clone</h2>\n<p>repository(프로젝트 폴더)를 새로운 장소에 다운로드할 때 쓰는 명령어.</p>\n\n<div class=\"languag...",
        "content"  : "<p><a href=\"https://git-scm.com/\">git</a> is version control system.</p>\n\n<p>github, bitbucket 등은 git을 지원하는 소프트웨어, 프로그램이다.\n<br /><br /></p>\n\n<h2 id=\"git-clone\">git clone</h2>\n<p>repository(프로젝트 폴더)를 새로운 장소에 다운로드할 때 쓰는 명령어.</p>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git clone <span class=\"sb\">`</span>url<span class=\"sb\">`</span>\n</code></pre></div></div>\n<p>repository를 만들면 url 주소가 제공되는데 이 주소를 넣어준다.\n<br /><br /></p>\n\n<h2 id=\"git-branch\">git branch</h2>\n\n<h3 id=\"branch-목록-조회\">branch 목록 조회</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git branch <span class=\"nt\">-vv</span>\n<span class=\"k\">*</span> master 4c1a5b5 <span class=\"o\">[</span>origin/master] Initial Commit\n</code></pre></div></div>\n<p>브랜치 목록을 확인할 수 있다.\n-vv 를 넣어주면 보다 자세한 정보도 함께 출력된다.</p>\n\n<p><br /></p>\n\n<h3 id=\"branch-삭제\">branch 삭제</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git brnach <span class=\"nt\">-D</span> <span class=\"sb\">`</span>삭제할 브랜치 이름<span class=\"sb\">`</span>\n</code></pre></div></div>\n\n<p><br /></p>\n\n<h3 id=\"branch-가져오기\">branch 가져오기</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\"># 방법 1</span>\n<span class=\"nv\">$ </span>git checkout <span class=\"nt\">-b</span> <span class=\"sb\">`</span>branch 이름<span class=\"sb\">`</span> origin/<span class=\"sb\">`</span>가져올 branch 이름<span class=\"sb\">`</span>\n\n<span class=\"c\"># 방법 2</span>\n<span class=\"nv\">$ </span>git fetch <span class=\"o\">&amp;&amp;</span> git checkout <span class=\"sb\">`</span>가져올 brnach 이름<span class=\"sb\">`</span>\n</code></pre></div></div>\n<p>내가 쓸 브랜치가 목록에 없다면 위의 명령어를 통해 브랜치를 가져올 수 있다.</p>\n\n<ul>\n  <li>branch 이름: 내가 임의로 정할 수 있다. 나는 보통 브랜치이름 그대로 쓴다.</li>\n</ul>\n\n<p><br /></p>\n\n<h3 id=\"branch-이동\">branch 이동</h3>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git checkout <span class=\"sb\">`</span>branch 이름<span class=\"sb\">`</span>\n</code></pre></div></div>\n<p>다른 브랜치로 이동할 수 있다.\n<br /><br /></p>\n\n<h2 id=\"git-status\">git status</h2>\n\n<div class=\"language-shell highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git status\nOn branch master\nYour branch is up to <span class=\"nb\">date </span>with <span class=\"s1\">'origin/master'</span><span class=\"nb\">.</span>\n\nChanges not staged <span class=\"k\">for </span>commit:\n<span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to update what will be committed<span class=\"o\">)</span>\n<span class=\"o\">(</span>use <span class=\"s2\">\"git checkout -- &lt;file&gt;...\"</span> to discard changes <span class=\"k\">in </span>working directory<span class=\"o\">)</span>\n\n modified:   file01.name\n  deleted:   file02.name\n\nUntracked files:\n<span class=\"o\">(</span>use <span class=\"s2\">\"git add &lt;file&gt;...\"</span> to include <span class=\"k\">in </span>what will be committed<span class=\"o\">)</span>\n\nfile01.name\n\nno changes added to commit <span class=\"o\">(</span>use <span class=\"s2\">\"git add\"</span> and/or <span class=\"s2\">\"git commit -a\"</span><span class=\"o\">)</span>\n</code></pre></div></div>\n\n<p>현재 상황을 볼 수 있다.\n현재 브랜치, 수정/삭제/생성된 파일 등을 볼 수 있다.</p>\n\n<p>충돌이 생기거나 문제가 생긴 경우에도 알려준다.\n<br /><br /></p>\n"
      } ,
   
      {
        "title"    : "development blog? wrong answer note?",
        "category" : "",
        "tags"     : " nonsense",
        "url"      : "/2017/08/07/0000.html",
        "date"     : "August 7, 2017",
        "excerpt"  : "<p>블로그일수도 오답노트일수도 있는 곳이에요.</p>\n\n<p>내가 겪게 되는 수많은 에러들이 있는게 반복해서 겪게 되더라구요. 그래서 그걸 기록해두려고 합니다.</p>\n\n<p>개발자로서의 고민거리들도 생겨나기 시작했구요. 그것 또한 기록할 것입니다.</p>\n\n<p>*</p>\n\n<p>개발자로서 블로그를 시작하고 싶어요. 제대로, 꾸준히.</p>\n\n<p>개발자면 다들 하나씩 갖고있는거 아니겠습니까?</p>\n\n<p>github 컨트리뷰션을 초...",
        "content"  : "<p>블로그일수도 오답노트일수도 있는 곳이에요.</p>\n\n<p>내가 겪게 되는 수많은 에러들이 있는게 반복해서 겪게 되더라구요. 그래서 그걸 기록해두려고 합니다.</p>\n\n<p>개발자로서의 고민거리들도 생겨나기 시작했구요. 그것 또한 기록할 것입니다.</p>\n\n<p>*</p>\n\n<p>개발자로서 블로그를 시작하고 싶어요. 제대로, 꾸준히.</p>\n\n<p>개발자면 다들 하나씩 갖고있는거 아니겠습니까?</p>\n\n<p>github 컨트리뷰션을 초록빛으로 물들이는 그날까지! 아니, 그 이후에도 계속!  이어하도록 노력해보겠습니다.</p>\n\n<p>*</p>\n\n<p>마크다운충인 저에게 이만한데도 없는데, 마음에 딱 드는 테마가 없어서 아쉬워요.\n핑계인가요?</p>\n\n<p>프론트에 대한 지식이 없어서 그런가, jekyll을 처음으로 써서 그런가, 많이 헤매고 있습니다.</p>\n"
      } ,
   
      {
        "title"    : "aws+python/ boto3, the AWS SDK for Python",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2017/04/06/urlencode.html",
        "date"     : "April 6, 2017",
        "excerpt"  : "<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">html</span>\n<span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span ...",
        "content"  : "<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">html</span>\n<span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n</code></pre></div></div>\n<p>입력받은 파라미터를 바로 넘기면 인코딩 문제가 발생할 수 있는데 그것을 방지하기 위해 미리 작업해두었다</p>\n\n"
      } ,
   
      {
        "title"    : "Welcome to Jekyll!",
        "category" : "",
        "tags"     : " ",
        "url"      : "/2017/04/06/notification.html",
        "date"     : "April 6, 2017",
        "excerpt"  : "\n",
        "content"  : "\n"
      } ,
   
      {
        "title"    : "project/ boombuy",
        "category" : "",
        "tags"     : " project, boombuy",
        "url"      : "/2017/03/18/python.html",
        "date"     : "March 18, 2017",
        "excerpt"  : "<p>#39;s 처리: ‘를 저렇게 출력할 때</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">html.parser</span> <span class=\"k\">as</span> <span class=\"n\">htmlpars...",
        "content"  : "<p>#39;s 처리: ‘를 저렇게 출력할 때</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">html.parser</span> <span class=\"k\">as</span> <span class=\"n\">htmlparser</span>\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">htmlparser</span><span class=\"o\">.</span><span class=\"n\">HTMLParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n"
      } ,
   
      {
        "title"    : "project/ boombuy",
        "category" : "",
        "tags"     : " project, boombuy",
        "url"      : "/2017/03/18/boombuy.html",
        "date"     : "March 18, 2017",
        "excerpt"  : "<h3 id=\"특징\">특징</h3>\n\n<p>분할결제 서비스 제공 안드로이드 앱</p>\n\n<p>선물을 줄 때 저렴한 선물을 주기엔 미안하고, 비싼 선물을 주기엔 너무 부담되는 사람들의 니즈를 충족시키는 것이 목적입니다.</p>\n\n<ul>\n  <li>상품을 ​친구들과 ​함께 1/N로 ​결제하여 ​선물하기</li>\n  <li>다양한 ​결제 ​수단 ​제공</li>\n  <li>받은 ​선물은 ​바코드로 ​쉽게 ​확인가능</li>\n  <li>주소록 ​...",
        "content"  : "<h3 id=\"특징\">특징</h3>\n\n<p>분할결제 서비스 제공 안드로이드 앱</p>\n\n<p>선물을 줄 때 저렴한 선물을 주기엔 미안하고, 비싼 선물을 주기엔 너무 부담되는 사람들의 니즈를 충족시키는 것이 목적입니다.</p>\n\n<ul>\n  <li>상품을 ​친구들과 ​함께 1/N로 ​결제하여 ​선물하기</li>\n  <li>다양한 ​결제 ​수단 ​제공</li>\n  <li>받은 ​선물은 ​바코드로 ​쉽게 ​확인가능</li>\n  <li>주소록 ​동기화로 ​친구 ​목록 ​생성</li>\n</ul>\n\n<h2 id=\"개발도구\">개발도구</h2>\n\n<ul>\n  <li>AWS</li>\n  <li>ubuntu</li>\n  <li>Node.js</li>\n  <li>WebStorm</li>\n  <li>MySQL</li>\n  <li>Firebase</li>\n</ul>\n\n<h2 id=\"erd\">ERD</h2>\n\n<p><img src=\"/assets/img/project/boombuy-erd.png\" alt=\"erd\" /></p>\n\n<h2 id=\"서버-아키텍처\">서버 아키텍처</h2>\n\n<p><img src=\"/assets/img/project/boombuy-server_architecture.png\" alt=\"server_architecture\" /></p>\n\n<h4 id=\"aws\">AWS</h4>\n\n<ul>\n  <li>EC2​ ​서비스로​ ​ubuntu​ ​서버를​ ​설치하여​ ​사용함</li>\n  <li>한​ ​개의​ ​RDS​ ​인스턴스에서​ ​MySQL로​ ​DB를​ ​관리함</li>\n  <li>S3​ ​스토리지를​ ​사용하여​ ​정적​ ​자원(사진,​ ​동영상)을​ ​저장함. 데이터베이스에는​ ​S3​ ​URL을​ ​저장하여​ ​사용함</li>\n  <li>SES,​ ​메일​ ​서비스</li>\n</ul>\n\n<h4 id=\"nodejs\">Node.js</h4>\n\n<ul>\n  <li>​express 웹 프레임워크를 이용하여 Rest API 작성, 메소드와 URL별로 미들웨어를 나눠서 서비스함</li>\n  <li>​passport 모듈로 페이스북 연동 로그인을 구현함</li>\n  <li>node-gcm​ ​모듈로​ ​푸쉬​ ​알림을​ ​보냄</li>\n  <li>winston으로​ ​로깅​ ​기능​ ​구현</li>\n</ul>\n\n<h4 id=\"보안\">보안</h4>\n\n<ul>\n  <li>SSL/TLS로​ ​암호화를​ ​사용하여​ ​네트워크​ ​보안</li>\n  <li>데이터베이스에​ ​저장되는​ ​개인​ ​정보는​ ​AES256,​ ​SHA256을​ ​통해​ ​암호화</li>\n</ul>\n"
      } 
   
   ,
   
     {
       
          "title"    : "Ninja",
          "category" : "",
          "tags"     : " Lorem",
          "url"      : "/portfolio/ninja",
          "date"     : "April 8, 2014",
          "excerpt"  : "<p><img src=\"/assets/img/portfolio/ninja.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architec...",
          "content"  : "<p><img src=\"/assets/img/portfolio/ninja.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architec..."
       
     } ,
   
     {
       
          "title"    : "Creative",
          "category" : "",
          "tags"     : " Ipsum",
          "url"      : "/portfolio/safe",
          "date"     : "August 16, 2014",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Circus",
          "category" : "",
          "tags"     : " Ipsum",
          "url"      : "/portfolio/circus",
          "date"     : "September 1, 2014",
          "excerpt"  : "<p><img src=\"/assets/img/portfolio/circus.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi archite...",
          "content"  : "<p><img src=\"/assets/img/portfolio/circus.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi archite..."
       
     } ,
   
     {
       
          "title"    : "Tower of Hanoi",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/hanoi",
          "date"     : "September 1, 2014",
          "excerpt"  : "<p><img src=\"/assets/img/portfolio/toh.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto...",
          "content"  : "<p><img src=\"/assets/img/portfolio/toh.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto..."
       
     } ,
   
     {
       
          "title"    : "Tic tac toe",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/tictactoe",
          "date"     : "September 1, 2014",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Cake",
          "category" : "",
          "tags"     : " Lorem, Ipsum, Portfolio",
          "url"      : "/portfolio/cake",
          "date"     : "September 27, 2015",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Jekyll",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/jekyllblog",
          "date"     : "May 26, 2017",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Lorem Ipsum",
          "category" : "",
          "tags"     : " ",
          "url"      : "/portfolio/submarine",
          "date"     : "September 3, 2017",
          "excerpt"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <...",
          "content"  : "<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem <..."
       
     } ,
   
     {
       
          "title"    : "Github",
          "category" : "",
          "tags"     : " Lorem, Portfolio",
          "url"      : "/portfolio/gitlecture",
          "date"     : "October 20, 2017",
          "excerpt"  : "<p><img src=\"/assets/img/portfolio/github.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi archite...",
          "content"  : "<p><img src=\"/assets/img/portfolio/github.png\" alt=\"image\" /></p>\n\n<p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi archite..."
       
     } 
   
  
]